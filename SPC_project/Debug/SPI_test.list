
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080024bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200000b0  0800256c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800256c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fc0  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c73  00000000  00000000  00023099  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011b2  00000000  00000000  00023d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000308  00000000  00000000  00024ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000250  00000000  00000000  000251c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002da2  00000000  00000000  00025418  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000038f2  00000000  00000000  000281ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a36b  00000000  00000000  0002baac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035e17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c8c  00000000  00000000  00035e94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000b0 	.word	0x200000b0
 800014c:	00000000 	.word	0x00000000
 8000150:	08002280 	.word	0x08002280

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000b4 	.word	0x200000b4
 800016c:	08002280 	.word	0x08002280

08000170 <KEYPAD_init>:
uint8_t KEYPAD_ROW[KEYPAD_ROWS] = {KEYPAD_R0,KEYPAD_R1,KEYPAD_R2,KEYPAD_R3};
uint8_t KEYPAD_COLUM[KEYPAD_COLUMS] = {KEYPAD_C0,KEYPAD_C1,KEYPAD_C2,KEYPAD_C3};
uint8_t keys[KEYPAD_ROWS][KEYPAD_COLUMS]= KEYPAD_keys ;

void KEYPAD_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Set the ROWS pins  input */
	pinconfg.GPIO_PinNumber = KEYPAD_R0;
 8000174:	4b42      	ldr	r3, [pc, #264]	; (8000280 <KEYPAD_init+0x110>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 800017a:	4b41      	ldr	r3, [pc, #260]	; (8000280 <KEYPAD_init+0x110>)
 800017c:	2202      	movs	r2, #2
 800017e:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000180:	493f      	ldr	r1, [pc, #252]	; (8000280 <KEYPAD_init+0x110>)
 8000182:	4840      	ldr	r0, [pc, #256]	; (8000284 <KEYPAD_init+0x114>)
 8000184:	f001 fb2c 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R1;
 8000188:	4b3d      	ldr	r3, [pc, #244]	; (8000280 <KEYPAD_init+0x110>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 800018e:	4b3c      	ldr	r3, [pc, #240]	; (8000280 <KEYPAD_init+0x110>)
 8000190:	2202      	movs	r2, #2
 8000192:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000194:	493a      	ldr	r1, [pc, #232]	; (8000280 <KEYPAD_init+0x110>)
 8000196:	483b      	ldr	r0, [pc, #236]	; (8000284 <KEYPAD_init+0x114>)
 8000198:	f001 fb22 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R2;
 800019c:	4b38      	ldr	r3, [pc, #224]	; (8000280 <KEYPAD_init+0x110>)
 800019e:	2203      	movs	r2, #3
 80001a0:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80001a2:	4b37      	ldr	r3, [pc, #220]	; (8000280 <KEYPAD_init+0x110>)
 80001a4:	2202      	movs	r2, #2
 80001a6:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 80001a8:	4935      	ldr	r1, [pc, #212]	; (8000280 <KEYPAD_init+0x110>)
 80001aa:	4836      	ldr	r0, [pc, #216]	; (8000284 <KEYPAD_init+0x114>)
 80001ac:	f001 fb18 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_R3;
 80001b0:	4b33      	ldr	r3, [pc, #204]	; (8000280 <KEYPAD_init+0x110>)
 80001b2:	2204      	movs	r2, #4
 80001b4:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80001b6:	4b32      	ldr	r3, [pc, #200]	; (8000280 <KEYPAD_init+0x110>)
 80001b8:	2202      	movs	r2, #2
 80001ba:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 80001bc:	4930      	ldr	r1, [pc, #192]	; (8000280 <KEYPAD_init+0x110>)
 80001be:	4831      	ldr	r0, [pc, #196]	; (8000284 <KEYPAD_init+0x114>)
 80001c0:	f001 fb0e 	bl	80017e0 <MCAL_GPIO_Init>

	/* Set The COLUMS pins Output */
	pinconfg.GPIO_PinNumber = KEYPAD_C0;
 80001c4:	4b2e      	ldr	r3, [pc, #184]	; (8000280 <KEYPAD_init+0x110>)
 80001c6:	2205      	movs	r2, #5
 80001c8:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001ca:	4b2d      	ldr	r3, [pc, #180]	; (8000280 <KEYPAD_init+0x110>)
 80001cc:	2204      	movs	r2, #4
 80001ce:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d0:	4b2b      	ldr	r3, [pc, #172]	; (8000280 <KEYPAD_init+0x110>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 80001d6:	492a      	ldr	r1, [pc, #168]	; (8000280 <KEYPAD_init+0x110>)
 80001d8:	482a      	ldr	r0, [pc, #168]	; (8000284 <KEYPAD_init+0x114>)
 80001da:	f001 fb01 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C1;
 80001de:	4b28      	ldr	r3, [pc, #160]	; (8000280 <KEYPAD_init+0x110>)
 80001e0:	2206      	movs	r2, #6
 80001e2:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	4b26      	ldr	r3, [pc, #152]	; (8000280 <KEYPAD_init+0x110>)
 80001e6:	2204      	movs	r2, #4
 80001e8:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ea:	4b25      	ldr	r3, [pc, #148]	; (8000280 <KEYPAD_init+0x110>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 80001f0:	4923      	ldr	r1, [pc, #140]	; (8000280 <KEYPAD_init+0x110>)
 80001f2:	4824      	ldr	r0, [pc, #144]	; (8000284 <KEYPAD_init+0x114>)
 80001f4:	f001 faf4 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C2;
 80001f8:	4b21      	ldr	r3, [pc, #132]	; (8000280 <KEYPAD_init+0x110>)
 80001fa:	2207      	movs	r2, #7
 80001fc:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	4b20      	ldr	r3, [pc, #128]	; (8000280 <KEYPAD_init+0x110>)
 8000200:	2204      	movs	r2, #4
 8000202:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000204:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <KEYPAD_init+0x110>)
 8000206:	2201      	movs	r2, #1
 8000208:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 800020a:	491d      	ldr	r1, [pc, #116]	; (8000280 <KEYPAD_init+0x110>)
 800020c:	481d      	ldr	r0, [pc, #116]	; (8000284 <KEYPAD_init+0x114>)
 800020e:	f001 fae7 	bl	80017e0 <MCAL_GPIO_Init>

	pinconfg.GPIO_PinNumber = KEYPAD_C3;
 8000212:	4b1b      	ldr	r3, [pc, #108]	; (8000280 <KEYPAD_init+0x110>)
 8000214:	2202      	movs	r2, #2
 8000216:	701a      	strb	r2, [r3, #0]
	pinconfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000218:	4b19      	ldr	r3, [pc, #100]	; (8000280 <KEYPAD_init+0x110>)
 800021a:	2204      	movs	r2, #4
 800021c:	705a      	strb	r2, [r3, #1]
	pinconfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <KEYPAD_init+0x110>)
 8000220:	2201      	movs	r2, #1
 8000222:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &pinconfg);
 8000224:	4916      	ldr	r1, [pc, #88]	; (8000280 <KEYPAD_init+0x110>)
 8000226:	4817      	ldr	r0, [pc, #92]	; (8000284 <KEYPAD_init+0x114>)
 8000228:	f001 fada 	bl	80017e0 <MCAL_GPIO_Init>

	/* Set the port of data */
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R0, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	2100      	movs	r1, #0
 8000230:	4814      	ldr	r0, [pc, #80]	; (8000284 <KEYPAD_init+0x114>)
 8000232:	f001 fb71 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R1, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2101      	movs	r1, #1
 800023a:	4812      	ldr	r0, [pc, #72]	; (8000284 <KEYPAD_init+0x114>)
 800023c:	f001 fb6c 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R2, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2103      	movs	r1, #3
 8000244:	480f      	ldr	r0, [pc, #60]	; (8000284 <KEYPAD_init+0x114>)
 8000246:	f001 fb67 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_R3, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	2104      	movs	r1, #4
 800024e:	480d      	ldr	r0, [pc, #52]	; (8000284 <KEYPAD_init+0x114>)
 8000250:	f001 fb62 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C0, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2105      	movs	r1, #5
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <KEYPAD_init+0x114>)
 800025a:	f001 fb5d 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C1, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2106      	movs	r1, #6
 8000262:	4808      	ldr	r0, [pc, #32]	; (8000284 <KEYPAD_init+0x114>)
 8000264:	f001 fb58 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C2, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2107      	movs	r1, #7
 800026c:	4805      	ldr	r0, [pc, #20]	; (8000284 <KEYPAD_init+0x114>)
 800026e:	f001 fb53 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C3, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <KEYPAD_init+0x114>)
 8000278:	f001 fb4e 	bl	8001918 <MCAL_GPIO_WritePin>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	200000d8 	.word	0x200000d8
 8000284:	40010c00 	.word	0x40010c00

08000288 <KEYPAD_GetKey>:
char KEYPAD_GetKey(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	uint8_t i , j ;

	for (i=0 ; i<KEYPAD_COLUMS ; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	e046      	b.n	8000322 <KEYPAD_GetKey+0x9a>
	{
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C0, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2105      	movs	r1, #5
 8000298:	4826      	ldr	r0, [pc, #152]	; (8000334 <KEYPAD_GetKey+0xac>)
 800029a:	f001 fb3d 	bl	8001918 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C1, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2106      	movs	r1, #6
 80002a2:	4824      	ldr	r0, [pc, #144]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002a4:	f001 fb38 	bl	8001918 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C2, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2107      	movs	r1, #7
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002ae:	f001 fb33 	bl	8001918 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_C3, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2102      	movs	r1, #2
 80002b6:	481f      	ldr	r0, [pc, #124]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002b8:	f001 fb2e 	bl	8001918 <MCAL_GPIO_WritePin>

		/* clear COLUM number i to check the low voltage when click key */
		MCAL_GPIO_WritePin(KEYPAD_PORT, KEYPAD_COLUM[i], GPIO_PIN_RESET);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4a1e      	ldr	r2, [pc, #120]	; (8000338 <KEYPAD_GetKey+0xb0>)
 80002c0:	5cd3      	ldrb	r3, [r2, r3]
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	481b      	ldr	r0, [pc, #108]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002c8:	f001 fb26 	bl	8001918 <MCAL_GPIO_WritePin>

		/* loop for ROWs */
		for(j= 0 ; j<KEYPAD_ROWS ; j++ )
 80002cc:	2300      	movs	r3, #0
 80002ce:	71bb      	strb	r3, [r7, #6]
 80002d0:	e021      	b.n	8000316 <KEYPAD_GetKey+0x8e>
		{
			if (!(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])))
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <KEYPAD_GetKey+0xb4>)
 80002d6:	5cd3      	ldrb	r3, [r2, r3]
 80002d8:	4619      	mov	r1, r3
 80002da:	4816      	ldr	r0, [pc, #88]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002dc:	f001 fb02 	bl	80018e4 <MCAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d114      	bne.n	8000310 <KEYPAD_GetKey+0x88>
			{
				while(!(MCAL_GPIO_ReadPin(KEYPAD_PORT, KEYPAD_ROW[j])));
 80002e6:	bf00      	nop
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <KEYPAD_GetKey+0xb4>)
 80002ec:	5cd3      	ldrb	r3, [r2, r3]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <KEYPAD_GetKey+0xac>)
 80002f2:	f001 faf7 	bl	80018e4 <MCAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f5      	beq.n	80002e8 <KEYPAD_GetKey+0x60>
				return keys[j][i];
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	79f9      	ldrb	r1, [r7, #7]
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <KEYPAD_GetKey+0xb8>)
 8000302:	4613      	mov	r3, r2
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	4413      	add	r3, r2
 8000308:	4403      	add	r3, r0
 800030a:	440b      	add	r3, r1
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	e00c      	b.n	800032a <KEYPAD_GetKey+0xa2>
		for(j= 0 ; j<KEYPAD_ROWS ; j++ )
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	3301      	adds	r3, #1
 8000314:	71bb      	strb	r3, [r7, #6]
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d9da      	bls.n	80002d2 <KEYPAD_GetKey+0x4a>
	for (i=0 ; i<KEYPAD_COLUMS ; i++)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	3301      	adds	r3, #1
 8000320:	71fb      	strb	r3, [r7, #7]
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b02      	cmp	r3, #2
 8000326:	d9b5      	bls.n	8000294 <KEYPAD_GetKey+0xc>
			}
		}
	}

	return 0 ;
 8000328:	2300      	movs	r3, #0
}
 800032a:	4618      	mov	r0, r3
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010c00 	.word	0x40010c00
 8000338:	20000004 	.word	0x20000004
 800033c:	20000000 	.word	0x20000000
 8000340:	20000008 	.word	0x20000008

08000344 <wait_ms>:
// global variables
GPIO_PinConfig_t pincofg  ;

// LCD global functions
void wait_ms(uint32_t time )
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0 ; i<time ; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e00b      	b.n	800036a <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	e002      	b.n	800035e <wait_ms+0x1a>
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3301      	adds	r3, #1
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	d9f9      	bls.n	8000358 <wait_ms+0x14>
	for(i=0 ; i<time ; i++)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	429a      	cmp	r2, r3
 8000370:	d3ef      	bcc.n	8000352 <wait_ms+0xe>
}
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <LCD_EN_Pluse>:
void LCD_EN_Pluse(LCD_Config_t* lcd)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_EN_PIN, GPIO_PIN_RESET);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6818      	ldr	r0, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	7a9b      	ldrb	r3, [r3, #10]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	f001 fac2 	bl	8001918 <MCAL_GPIO_WritePin>
	wait_ms(50);
 8000394:	2032      	movs	r0, #50	; 0x32
 8000396:	f7ff ffd5 	bl	8000344 <wait_ms>
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_EN_PIN, GPIO_PIN_SET);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6818      	ldr	r0, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	7a9b      	ldrb	r3, [r3, #10]
 80003a2:	2201      	movs	r2, #1
 80003a4:	4619      	mov	r1, r3
 80003a6:	f001 fab7 	bl	8001918 <MCAL_GPIO_WritePin>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <LCD_init>:

/* LCD APIS */
void LCD_init(LCD_Config_t* lcd)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	wait_ms(20);
 80003bc:	2014      	movs	r0, #20
 80003be:	f7ff ffc1 	bl	8000344 <wait_ms>
		pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
		pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);

#endif
	pincofg.GPIO_PinNumber = lcd->LCD_D4_PIN;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7bda      	ldrb	r2, [r3, #15]
 80003c6:	4b52      	ldr	r3, [pc, #328]	; (8000510 <LCD_init+0x15c>)
 80003c8:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	4b51      	ldr	r3, [pc, #324]	; (8000510 <LCD_init+0x15c>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003d0:	4b4f      	ldr	r3, [pc, #316]	; (8000510 <LCD_init+0x15c>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	494d      	ldr	r1, [pc, #308]	; (8000510 <LCD_init+0x15c>)
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 f9ff 	bl	80017e0 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = lcd->LCD_D5_PIN;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7c1a      	ldrb	r2, [r3, #16]
 80003e6:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <LCD_init+0x15c>)
 80003e8:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	4b49      	ldr	r3, [pc, #292]	; (8000510 <LCD_init+0x15c>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003f0:	4b47      	ldr	r3, [pc, #284]	; (8000510 <LCD_init+0x15c>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	4945      	ldr	r1, [pc, #276]	; (8000510 <LCD_init+0x15c>)
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 f9ef 	bl	80017e0 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = lcd->LCD_D6_PIN;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	7c5a      	ldrb	r2, [r3, #17]
 8000406:	4b42      	ldr	r3, [pc, #264]	; (8000510 <LCD_init+0x15c>)
 8000408:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	4b41      	ldr	r3, [pc, #260]	; (8000510 <LCD_init+0x15c>)
 800040c:	2204      	movs	r2, #4
 800040e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000410:	4b3f      	ldr	r3, [pc, #252]	; (8000510 <LCD_init+0x15c>)
 8000412:	2201      	movs	r2, #1
 8000414:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	493d      	ldr	r1, [pc, #244]	; (8000510 <LCD_init+0x15c>)
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f9df 	bl	80017e0 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = lcd->LCD_D7_PIN;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7c9a      	ldrb	r2, [r3, #18]
 8000426:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <LCD_init+0x15c>)
 8000428:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	4b39      	ldr	r3, [pc, #228]	; (8000510 <LCD_init+0x15c>)
 800042c:	2204      	movs	r2, #4
 800042e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000430:	4b37      	ldr	r3, [pc, #220]	; (8000510 <LCD_init+0x15c>)
 8000432:	2201      	movs	r2, #1
 8000434:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4935      	ldr	r1, [pc, #212]	; (8000510 <LCD_init+0x15c>)
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f9cf 	bl	80017e0 <MCAL_GPIO_Init>

	// SET control pins output (Rs , RW , EN)
	pincofg.GPIO_PinNumber = lcd->LCD_RS_PIN;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7a1a      	ldrb	r2, [r3, #8]
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <LCD_init+0x15c>)
 8000448:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	4b31      	ldr	r3, [pc, #196]	; (8000510 <LCD_init+0x15c>)
 800044c:	2204      	movs	r2, #4
 800044e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000450:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <LCD_init+0x15c>)
 8000452:	2201      	movs	r2, #1
 8000454:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_CONTROL_PORT, &pincofg);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	492d      	ldr	r1, [pc, #180]	; (8000510 <LCD_init+0x15c>)
 800045c:	4618      	mov	r0, r3
 800045e:	f001 f9bf 	bl	80017e0 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = lcd->LCD_RW_PIN;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7a5a      	ldrb	r2, [r3, #9]
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <LCD_init+0x15c>)
 8000468:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	4b29      	ldr	r3, [pc, #164]	; (8000510 <LCD_init+0x15c>)
 800046c:	2204      	movs	r2, #4
 800046e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <LCD_init+0x15c>)
 8000472:	2201      	movs	r2, #1
 8000474:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_CONTROL_PORT, &pincofg);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4925      	ldr	r1, [pc, #148]	; (8000510 <LCD_init+0x15c>)
 800047c:	4618      	mov	r0, r3
 800047e:	f001 f9af 	bl	80017e0 <MCAL_GPIO_Init>

	pincofg.GPIO_PinNumber = lcd->LCD_EN_PIN;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7a9a      	ldrb	r2, [r3, #10]
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <LCD_init+0x15c>)
 8000488:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <LCD_init+0x15c>)
 800048c:	2204      	movs	r2, #4
 800048e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <LCD_init+0x15c>)
 8000492:	2201      	movs	r2, #1
 8000494:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_CONTROL_PORT, &pincofg);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	491d      	ldr	r1, [pc, #116]	; (8000510 <LCD_init+0x15c>)
 800049c:	4618      	mov	r0, r3
 800049e:	f001 f99f 	bl	80017e0 <MCAL_GPIO_Init>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RS_PIN, GPIO_PIN_RESET);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6818      	ldr	r0, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7a1b      	ldrb	r3, [r3, #8]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	f001 fa33 	bl	8001918 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RW_PIN, GPIO_PIN_RESET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	7a5b      	ldrb	r3, [r3, #9]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f001 fa2b 	bl	8001918 <MCAL_GPIO_WritePin>

	// EN off
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_EN_PIN, GPIO_PIN_RESET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7a9b      	ldrb	r3, [r3, #10]
 80004ca:	2200      	movs	r2, #0
 80004cc:	4619      	mov	r1, r3
 80004ce:	f001 fa23 	bl	8001918 <MCAL_GPIO_WritePin>

	wait_ms(15);
 80004d2:	200f      	movs	r0, #15
 80004d4:	f7ff ff36 	bl	8000344 <wait_ms>
	LCD_Clear_Screen(lcd);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f9a4 	bl	8000826 <LCD_Clear_Screen>
	LCD_Send_Command(lcd ,LCD_FUNCTION_8BIT_2LINE);

	/*4_BIT_MODE_INIT*/
#elif LCD_MODE == LCD_4_BIT_MODE

	LCD_Send_Command(lcd ,0x02);
 80004de:	2102      	movs	r1, #2
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f000 f865 	bl	80005b0 <LCD_Send_Command>
	LCD_Send_Command(lcd ,LCD_FUNCTION_4BIT_2LINE);
 80004e6:	2128      	movs	r1, #40	; 0x28
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 f861 	bl	80005b0 <LCD_Send_Command>

#endif


	LCD_Send_Command(lcd ,LCD_ENTRY_MODE);
 80004ee:	2106      	movs	r1, #6
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f85d 	bl	80005b0 <LCD_Send_Command>
	LCD_Send_Command(lcd ,LCD_BEGIN_AT_FIRST_RAW);
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f859 	bl	80005b0 <LCD_Send_Command>
	LCD_Send_Command(lcd ,LCD_DISP_ON_CURSOR_BLINK);
 80004fe:	210f      	movs	r1, #15
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f855 	bl	80005b0 <LCD_Send_Command>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000dc 	.word	0x200000dc

08000514 <LCD_Is_Busy>:
void LCD_Is_Busy(LCD_Config_t* lcd)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	// set pin connected to D7 to receive data (Data direction as input).
	pincofg.GPIO_PinNumber = lcd->LCD_D7_PIN;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7c9a      	ldrb	r2, [r3, #18]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <LCD_Is_Busy+0x98>)
 8000522:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <LCD_Is_Busy+0x98>)
 8000526:	2201      	movs	r2, #1
 8000528:	705a      	strb	r2, [r3, #1]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	491f      	ldr	r1, [pc, #124]	; (80005ac <LCD_Is_Busy+0x98>)
 8000530:	4618      	mov	r0, r3
 8000532:	f001 f955 	bl	80017e0 <MCAL_GPIO_Init>

	// put the LCD in read mode (RW =1 on)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RW_PIN, GPIO_PIN_SET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7a5b      	ldrb	r3, [r3, #9]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f001 f9e9 	bl	8001918 <MCAL_GPIO_WritePin>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RS_PIN, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a1b      	ldrb	r3, [r3, #8]
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f001 f9e1 	bl	8001918 <MCAL_GPIO_WritePin>

	while (((MCAL_GPIO_ReadPin(lcd->LCD_DATA_PORT, lcd->LCD_D7_PIN))&1));
 8000556:	bf00      	nop
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7c9b      	ldrb	r3, [r3, #18]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f001 f9be 	bl	80018e4 <MCAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1f2      	bne.n	8000558 <LCD_Is_Busy+0x44>

	// set  D7 to receive data (Data direction as output).
	pincofg.GPIO_PinNumber = lcd->LCD_D7_PIN;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7c9a      	ldrb	r2, [r3, #18]
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <LCD_Is_Busy+0x98>)
 8000578:	701a      	strb	r2, [r3, #0]
	pincofg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <LCD_Is_Busy+0x98>)
 800057c:	2204      	movs	r2, #4
 800057e:	705a      	strb	r2, [r3, #1]
	pincofg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <LCD_Is_Busy+0x98>)
 8000582:	2201      	movs	r2, #1
 8000584:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(lcd->LCD_DATA_PORT, &pincofg);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	4908      	ldr	r1, [pc, #32]	; (80005ac <LCD_Is_Busy+0x98>)
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f927 	bl	80017e0 <MCAL_GPIO_Init>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RW_PIN, GPIO_PIN_RESET);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7a5b      	ldrb	r3, [r3, #9]
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	f001 f9bb 	bl	8001918 <MCAL_GPIO_WritePin>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000dc 	.word	0x200000dc

080005b0 <LCD_Send_Command>:
void LCD_Send_Command(LCD_Config_t* lcd ,uint8_t command)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
	// Check if LCD is busy
	LCD_Is_Busy(lcd);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffa9 	bl	8000514 <LCD_Is_Busy>

	//put the LCD in command mode (RS =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RS_PIN, GPIO_PIN_RESET);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7a1b      	ldrb	r3, [r3, #8]
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	f001 f9a3 	bl	8001918 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RW_PIN, GPIO_PIN_RESET);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7a5b      	ldrb	r3, [r3, #9]
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f99b 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D4_PIN, ((command >>4) & 1));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6858      	ldr	r0, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7bd9      	ldrb	r1, [r3, #15]
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	091b      	lsrs	r3, r3, #4
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	f001 f98e 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D5_PIN, ((command >>5) & 1));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6858      	ldr	r0, [r3, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c19      	ldrb	r1, [r3, #16]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	461a      	mov	r2, r3
 8000612:	f001 f981 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D6_PIN, ((command >>6) & 1));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6858      	ldr	r0, [r3, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7c59      	ldrb	r1, [r3, #17]
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	099b      	lsrs	r3, r3, #6
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	f001 f974 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D7_PIN, ((command >>7) & 1));
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6858      	ldr	r0, [r3, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7c99      	ldrb	r1, [r3, #18]
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	09db      	lsrs	r3, r3, #7
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	f001 f96a 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fe99 	bl	800037c <LCD_EN_Pluse>

	// Write The Least 4 bits Of command on Data Pins
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D4_PIN, ((command) & 1));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6858      	ldr	r0, [r3, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7bd9      	ldrb	r1, [r3, #15]
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	f001 f95c 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D5_PIN, ((command >>1) & 1));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6858      	ldr	r0, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7c19      	ldrb	r1, [r3, #16]
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	f001 f94f 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D6_PIN, ((command >>2) & 1));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6858      	ldr	r0, [r3, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7c59      	ldrb	r1, [r3, #17]
 8000682:	78fb      	ldrb	r3, [r7, #3]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	f001 f942 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D7_PIN, ((command >>3) & 1));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7c99      	ldrb	r1, [r3, #18]
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	08db      	lsrs	r3, r3, #3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	f001 f935 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fe64 	bl	800037c <LCD_EN_Pluse>

#endif


}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <LCD_Send_Character>:
void LCD_Send_Character(LCD_Config_t* lcd ,uint8_t character)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
	//put the LCD in Data mode (RS=1 on)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RS_PIN, GPIO_PIN_SET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f920 	bl	8001918 <MCAL_GPIO_WritePin>

	// put the LCD in write mode (RW =0 off)
	MCAL_GPIO_WritePin(lcd->LCD_CONTROL_PORT, lcd->LCD_RW_PIN, GPIO_PIN_RESET);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7a5b      	ldrb	r3, [r3, #9]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 f918 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);

#elif LCD_MODE == LCD_4_BIT_MODE

	// Write The Most 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D4_PIN, ((character >>4) & 1));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7bd9      	ldrb	r1, [r3, #15]
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f001 f90b 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D5_PIN, ((character >>5) & 1));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6858      	ldr	r0, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7c19      	ldrb	r1, [r3, #16]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	f001 f8fe 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D6_PIN, ((character >>6) & 1));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6858      	ldr	r0, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7c59      	ldrb	r1, [r3, #17]
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	f001 f8f1 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D7_PIN, ((character >>7) & 1));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6858      	ldr	r0, [r3, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7c99      	ldrb	r1, [r3, #18]
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	f001 f8e7 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fe16 	bl	800037c <LCD_EN_Pluse>

	// Write The Least 4 bits Of data on Data Pins
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D4_PIN, (character & 1));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6858      	ldr	r0, [r3, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7bd9      	ldrb	r1, [r3, #15]
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	f001 f8d9 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D5_PIN, ((character>>1) & 1));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6858      	ldr	r0, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7c19      	ldrb	r1, [r3, #16]
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	f001 f8cc 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D6_PIN, ((character>>2) & 1));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6858      	ldr	r0, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7c59      	ldrb	r1, [r3, #17]
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	f001 f8bf 	bl	8001918 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd->LCD_DATA_PORT, lcd->LCD_D7_PIN, ((character>>3) & 1));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6858      	ldr	r0, [r3, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7c99      	ldrb	r1, [r3, #18]
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f001 f8b2 	bl	8001918 <MCAL_GPIO_WritePin>
	LCD_EN_Pluse(lcd);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fde1 	bl	800037c <LCD_EN_Pluse>

#endif

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <LCD_Send_string>:
void LCD_Send_string(LCD_Config_t* lcd ,uint8_t* string)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
	while( *string > 0)
 80007d0:	e021      	b.n	8000816 <LCD_Send_string+0x54>
	{
		counter++;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3301      	adds	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
		LCD_Send_Character(lcd ,*string);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff6c 	bl	80006bc <LCD_Send_Character>
		string++;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	603b      	str	r3, [r7, #0]

		if(counter == 16)
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	d105      	bne.n	80007fc <LCD_Send_string+0x3a>
		{
			LCD_SET_Cursor(lcd,2, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2102      	movs	r1, #2
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f822 	bl	800083e <LCD_SET_Cursor>
 80007fa:	e00c      	b.n	8000816 <LCD_Send_string+0x54>
		}
		else if(counter == 32)
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b20      	cmp	r3, #32
 8000800:	d109      	bne.n	8000816 <LCD_Send_string+0x54>
		{
			LCD_Clear_Screen(lcd);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f80f 	bl	8000826 <LCD_Clear_Screen>
			LCD_SET_Cursor(lcd,1, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f816 	bl	800083e <LCD_SET_Cursor>
			counter =0 ;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
	while( *string > 0)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1d9      	bne.n	80007d2 <LCD_Send_string+0x10>
		}
	}
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <LCD_Clear_Screen>:
void LCD_Clear_Screen(LCD_Config_t* lcd)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(lcd ,LCD_CLEAR_SCREEN);
 800082e:	2101      	movs	r1, #1
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff febd 	bl	80005b0 <LCD_Send_Command>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <LCD_SET_Cursor>:
void LCD_SET_Cursor(LCD_Config_t* lcd ,uint8_t line , uint8_t position )
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	70fb      	strb	r3, [r7, #3]
 800084a:	4613      	mov	r3, r2
 800084c:	70bb      	strb	r3, [r7, #2]
	if (line == 1)
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d10a      	bne.n	800086a <LCD_SET_Cursor+0x2c>
	{
		if(position<16)
 8000854:	78bb      	ldrb	r3, [r7, #2]
 8000856:	2b0f      	cmp	r3, #15
 8000858:	d814      	bhi.n	8000884 <LCD_SET_Cursor+0x46>
		LCD_Send_Command(lcd,LCD_BEGIN_AT_FIRST_RAW + position);
 800085a:	78bb      	ldrb	r3, [r7, #2]
 800085c:	3b80      	subs	r3, #128	; 0x80
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fea4 	bl	80005b0 <LCD_Send_Command>
	else if (line == 2)
	{
		if(position<16)
		LCD_Send_Command(lcd,LCD_BEGIN_AT_SECOND_RAW + position);
	}
}
 8000868:	e00c      	b.n	8000884 <LCD_SET_Cursor+0x46>
	else if (line == 2)
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d109      	bne.n	8000884 <LCD_SET_Cursor+0x46>
		if(position<16)
 8000870:	78bb      	ldrb	r3, [r7, #2]
 8000872:	2b0f      	cmp	r3, #15
 8000874:	d806      	bhi.n	8000884 <LCD_SET_Cursor+0x46>
		LCD_Send_Command(lcd,LCD_BEGIN_AT_SECOND_RAW + position);
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	3b40      	subs	r3, #64	; 0x40
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fe96 	bl	80005b0 <LCD_Send_Command>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <LCD_Display_Number>:
void LCD_Display_Number(LCD_Config_t* lcd,uint32_t number)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	uint8_t str[7];
	sprintf(str,"%d",number);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <LCD_Display_Number+0x2c>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f8dc 	bl	8001a5c <siprintf>
	LCD_Send_string(lcd,str);
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff89 	bl	80007c2 <LCD_Send_string>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08002298 	.word	0x08002298

080008bc <Servo_Motor_init>:
#include "servo_motor.h"


/* Servo Motor APIs */
void Servo_Motor_init(Servo_Typedef_t* sm)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCinfg;
	pinCinfg.GPIO_PinNumber = sm->GPIO_PIN_x;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	733b      	strb	r3, [r7, #12]
	pinCinfg.GPIO_Mode		= GPIO_MODE_OUTPUT_PP;
 80008ca:	2304      	movs	r3, #4
 80008cc:	737b      	strb	r3, [r7, #13]
	pinCinfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73bb      	strb	r3, [r7, #14]

	MCAL_GPIO_Init(sm->GPIOx, &pinCinfg);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f107 020c 	add.w	r2, r7, #12
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 ff7f 	bl	80017e0 <MCAL_GPIO_Init>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Servo_Motor>:
void Servo_Motor(Servo_Typedef_t* sm , uint32_t angle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	uint32_t angle_time_us=0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]

	angle_time_us = ((angle*1000)/90) + 486 ;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <Servo_Motor+0x68>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	095b      	lsrs	r3, r3, #5
 800090e:	f503 73f3 	add.w	r3, r3, #486	; 0x1e6
 8000912:	60fb      	str	r3, [r7, #12]
//	angle_time_us = (angle < 180)? (((angle*1000)/90) + 500) : (((360-angle)*1000)/90) + 500 ;

	MCAL_GPIO_WritePin(sm->GPIOx, sm->GPIO_PIN_x, GPIO_PIN_SET);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	f000 fffa 	bl	8001918 <MCAL_GPIO_WritePin>
	dus(angle_time_us);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f842 	bl	80019b0 <dus>
	MCAL_GPIO_WritePin(sm->GPIOx, sm->GPIO_PIN_x, GPIO_PIN_RESET);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	f000 ffee 	bl	8001918 <MCAL_GPIO_WritePin>
	dus(20000-angle_time_us);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000942:	3320      	adds	r3, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f833 	bl	80019b0 <dus>

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	b60b60b7 	.word	0xb60b60b7

08000958 <Search_ID>:

Servo_Typedef_t servo1 ={GPIOB,GPIO_PIN_8} , servo2= {GPIOB,GPIO_PIN_9} ;
LCD_Config_t lcd1 ={GPIOB , GPIOB ,GPIO_PIN_11,GPIO_PIN_2,GPIO_PIN_10 } , lcd2={GPIOA , GPIOA ,GPIO_PIN_5,GPIO_PIN_8,GPIO_PIN_6 } ;
/*******************		...Global Functions...		*******************/
uint8_t Search_ID(uint32_t id)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; i<last_id_index ; i++)
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e00b      	b.n	800097e <Search_ID+0x26>
	{
		if(id == IDs_Container[i])
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <Search_ID+0x40>)
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d101      	bne.n	8000978 <Search_ID+0x20>
			return i ;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	e009      	b.n	800098c <Search_ID+0x34>
	for(i=0; i<last_id_index ; i++)
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3301      	adds	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <Search_ID+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3ee      	bcc.n	8000966 <Search_ID+0xe>
	}
	return last_id_index;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <Search_ID+0x44>)
 800098a:	781b      	ldrb	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200000f0 	.word	0x200000f0
 800099c:	200000ec 	.word	0x200000ec

080009a0 <usart1_IRQ>:

void usart1_IRQ(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &enter_RX, disable);
 80009a4:	2201      	movs	r2, #1
 80009a6:	4914      	ldr	r1, [pc, #80]	; (80009f8 <usart1_IRQ+0x58>)
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <usart1_IRQ+0x5c>)
 80009aa:	f000 fe85 	bl	80016b8 <MCAL_UART_ReceiveData>
	if(enter_RX != '#')
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <usart1_IRQ+0x58>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2b23      	cmp	r3, #35	; 0x23
 80009b4:	d015      	beq.n	80009e2 <usart1_IRQ+0x42>
		Entry_id = (Entry_id == 0)? (enter_RX-'0') : ((Entry_id*10) + (enter_RX-'0'));
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <usart1_IRQ+0x60>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <usart1_IRQ+0x26>
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <usart1_IRQ+0x58>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	3b30      	subs	r3, #48	; 0x30
 80009c4:	e00a      	b.n	80009dc <usart1_IRQ+0x3c>
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <usart1_IRQ+0x60>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <usart1_IRQ+0x58>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	3b30      	subs	r3, #48	; 0x30
 80009dc:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <usart1_IRQ+0x60>)
 80009de:	6013      	str	r3, [r2, #0]
	else
	{
		SCP_Entry_Process(Entry_id);
		Entry_id = 0;
	}
}
 80009e0:	e007      	b.n	80009f2 <usart1_IRQ+0x52>
		SCP_Entry_Process(Entry_id);
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <usart1_IRQ+0x60>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fb14 	bl	8001014 <SCP_Entry_Process>
		Entry_id = 0;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <usart1_IRQ+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000ee 	.word	0x200000ee
 80009fc:	40013800 	.word	0x40013800
 8000a00:	200000e4 	.word	0x200000e4

08000a04 <usart2_IRQ>:

void usart2_IRQ(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART2, &exit_RX, disable);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4914      	ldr	r1, [pc, #80]	; (8000a5c <usart2_IRQ+0x58>)
 8000a0c:	4814      	ldr	r0, [pc, #80]	; (8000a60 <usart2_IRQ+0x5c>)
 8000a0e:	f000 fe53 	bl	80016b8 <MCAL_UART_ReceiveData>
	if(exit_RX != '#')
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <usart2_IRQ+0x58>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	2b23      	cmp	r3, #35	; 0x23
 8000a18:	d015      	beq.n	8000a46 <usart2_IRQ+0x42>
		Exit_id = (Exit_id == 0)? (exit_RX-'0') : ((Exit_id*10) + (exit_RX-'0'));
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <usart2_IRQ+0x60>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <usart2_IRQ+0x26>
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <usart2_IRQ+0x58>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	3b30      	subs	r3, #48	; 0x30
 8000a28:	e00a      	b.n	8000a40 <usart2_IRQ+0x3c>
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <usart2_IRQ+0x60>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <usart2_IRQ+0x58>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	3b30      	subs	r3, #48	; 0x30
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <usart2_IRQ+0x60>)
 8000a42:	6013      	str	r3, [r2, #0]
	else
	{
		SCP_Exit_Process(Exit_id);
		Exit_id = 0;
	}
}
 8000a44:	e007      	b.n	8000a56 <usart2_IRQ+0x52>
		SCP_Exit_Process(Exit_id);
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <usart2_IRQ+0x60>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb4e 	bl	80010ec <SCP_Exit_Process>
		Exit_id = 0;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <usart2_IRQ+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000e0 	.word	0x200000e0
 8000a60:	40004400 	.word	0x40004400
 8000a64:	200000e8 	.word	0x200000e8

08000a68 <SCP_Init>:

/*******************		...APIs...		*******************/
void SCP_Init()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
	/* Initiate system drivers. */
	KEYPAD_init();
 8000a6e:	f7ff fb7f 	bl	8000170 <KEYPAD_init>
	lcd1.LCD_D4_PIN = GPIO_PIN_12;
 8000a72:	4b7b      	ldr	r3, [pc, #492]	; (8000c60 <SCP_Init+0x1f8>)
 8000a74:	220c      	movs	r2, #12
 8000a76:	73da      	strb	r2, [r3, #15]
	lcd1.LCD_D5_PIN = GPIO_PIN_13;
 8000a78:	4b79      	ldr	r3, [pc, #484]	; (8000c60 <SCP_Init+0x1f8>)
 8000a7a:	220d      	movs	r2, #13
 8000a7c:	741a      	strb	r2, [r3, #16]
	lcd1.LCD_D6_PIN = GPIO_PIN_14;
 8000a7e:	4b78      	ldr	r3, [pc, #480]	; (8000c60 <SCP_Init+0x1f8>)
 8000a80:	220e      	movs	r2, #14
 8000a82:	745a      	strb	r2, [r3, #17]
	lcd1.LCD_D7_PIN = GPIO_PIN_15;
 8000a84:	4b76      	ldr	r3, [pc, #472]	; (8000c60 <SCP_Init+0x1f8>)
 8000a86:	220f      	movs	r2, #15
 8000a88:	749a      	strb	r2, [r3, #18]

	lcd2.LCD_D4_PIN = GPIO_PIN_12;
 8000a8a:	4b76      	ldr	r3, [pc, #472]	; (8000c64 <SCP_Init+0x1fc>)
 8000a8c:	220c      	movs	r2, #12
 8000a8e:	73da      	strb	r2, [r3, #15]
	lcd2.LCD_D5_PIN = GPIO_PIN_13;
 8000a90:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <SCP_Init+0x1fc>)
 8000a92:	220d      	movs	r2, #13
 8000a94:	741a      	strb	r2, [r3, #16]
	lcd2.LCD_D6_PIN = GPIO_PIN_14;
 8000a96:	4b73      	ldr	r3, [pc, #460]	; (8000c64 <SCP_Init+0x1fc>)
 8000a98:	220e      	movs	r2, #14
 8000a9a:	745a      	strb	r2, [r3, #17]
	lcd2.LCD_D7_PIN = GPIO_PIN_15;
 8000a9c:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <SCP_Init+0x1fc>)
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	749a      	strb	r2, [r3, #18]

	LCD_init(&lcd1);
 8000aa2:	486f      	ldr	r0, [pc, #444]	; (8000c60 <SCP_Init+0x1f8>)
 8000aa4:	f7ff fc86 	bl	80003b4 <LCD_init>
	LCD_init(&lcd2);
 8000aa8:	486e      	ldr	r0, [pc, #440]	; (8000c64 <SCP_Init+0x1fc>)
 8000aaa:	f7ff fc83 	bl	80003b4 <LCD_init>

	/* Welcome massage */
	LCD_Send_string(&lcd1 ,"Welcome to SCP:)");
 8000aae:	496e      	ldr	r1, [pc, #440]	; (8000c68 <SCP_Init+0x200>)
 8000ab0:	486b      	ldr	r0, [pc, #428]	; (8000c60 <SCP_Init+0x1f8>)
 8000ab2:	f7ff fe86 	bl	80007c2 <LCD_Send_string>

	do
	{
		/* Instructions massage */
		uint8_t ch=0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75fb      	strb	r3, [r7, #23]
		LCD_Clear_Screen(&lcd1);
 8000aba:	4869      	ldr	r0, [pc, #420]	; (8000c60 <SCP_Init+0x1f8>)
 8000abc:	f7ff feb3 	bl	8000826 <LCD_Clear_Screen>
		LCD_Send_string(&lcd1 ,"slots number :");
 8000ac0:	496a      	ldr	r1, [pc, #424]	; (8000c6c <SCP_Init+0x204>)
 8000ac2:	4867      	ldr	r0, [pc, #412]	; (8000c60 <SCP_Init+0x1f8>)
 8000ac4:	f7ff fe7d 	bl	80007c2 <LCD_Send_string>
		slots_number = 0 ;
 8000ac8:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <SCP_Init+0x208>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		while((ch = KEYPAD_GetKey())!='#')
 8000ace:	e01d      	b.n	8000b0c <SCP_Init+0xa4>
		{
			if(ch != 0)
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d01a      	beq.n	8000b0c <SCP_Init+0xa4>
			{
				LCD_Send_Character(&lcd1 ,ch);
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4861      	ldr	r0, [pc, #388]	; (8000c60 <SCP_Init+0x1f8>)
 8000adc:	f7ff fdee 	bl	80006bc <LCD_Send_Character>
				slots_number = (slots_number==0)? (ch -'0') : ((slots_number*10)+(ch - '0')) ;
 8000ae0:	4b63      	ldr	r3, [pc, #396]	; (8000c70 <SCP_Init+0x208>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d103      	bne.n	8000af0 <SCP_Init+0x88>
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	3b30      	subs	r3, #48	; 0x30
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	e00b      	b.n	8000b08 <SCP_Init+0xa0>
 8000af0:	4b5f      	ldr	r3, [pc, #380]	; (8000c70 <SCP_Init+0x208>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	4413      	add	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	3b30      	subs	r3, #48	; 0x30
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <SCP_Init+0x208>)
 8000b0a:	7013      	strb	r3, [r2, #0]
		while((ch = KEYPAD_GetKey())!='#')
 8000b0c:	f7ff fbbc 	bl	8000288 <KEYPAD_GetKey>
 8000b10:	4603      	mov	r3, r0
 8000b12:	75fb      	strb	r3, [r7, #23]
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	2b23      	cmp	r3, #35	; 0x23
 8000b18:	d1da      	bne.n	8000ad0 <SCP_Init+0x68>
			}
		}

		if(slots_number >50 || slots_number<=0)
 8000b1a:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <SCP_Init+0x208>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b32      	cmp	r3, #50	; 0x32
 8000b20:	d803      	bhi.n	8000b2a <SCP_Init+0xc2>
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <SCP_Init+0x208>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d106      	bne.n	8000b38 <SCP_Init+0xd0>
		{
			LCD_Clear_Screen(&lcd1);
 8000b2a:	484d      	ldr	r0, [pc, #308]	; (8000c60 <SCP_Init+0x1f8>)
 8000b2c:	f7ff fe7b 	bl	8000826 <LCD_Clear_Screen>
			LCD_Send_string(&lcd1 ,"not valid , try again");
 8000b30:	4950      	ldr	r1, [pc, #320]	; (8000c74 <SCP_Init+0x20c>)
 8000b32:	484b      	ldr	r0, [pc, #300]	; (8000c60 <SCP_Init+0x1f8>)
 8000b34:	f7ff fe45 	bl	80007c2 <LCD_Send_string>
		}
	}while(slots_number>50 || slots_number <=0);
 8000b38:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <SCP_Init+0x208>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b32      	cmp	r3, #50	; 0x32
 8000b3e:	d8ba      	bhi.n	8000ab6 <SCP_Init+0x4e>
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <SCP_Init+0x208>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0b6      	beq.n	8000ab6 <SCP_Init+0x4e>
	avalible_slots = slots_number ;
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <SCP_Init+0x208>)
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <SCP_Init+0x210>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	LCD_Clear_Screen(&lcd1);
 8000b50:	4843      	ldr	r0, [pc, #268]	; (8000c60 <SCP_Init+0x1f8>)
 8000b52:	f7ff fe68 	bl	8000826 <LCD_Clear_Screen>
	/* Default massage */
	LCD_Send_string(&lcd1 ,"For options '*'");
 8000b56:	4949      	ldr	r1, [pc, #292]	; (8000c7c <SCP_Init+0x214>)
 8000b58:	4841      	ldr	r0, [pc, #260]	; (8000c60 <SCP_Init+0x1f8>)
 8000b5a:	f7ff fe32 	bl	80007c2 <LCD_Send_string>

	/* Led and PIR Pins config*/
	GPIO_PinConfig_t pinConfig;

	//green led
	pinConfig.GPIO_PinNumber = GPIO_PIN_11 ;
 8000b5e:	230b      	movs	r3, #11
 8000b60:	753b      	strb	r3, [r7, #20]
	pinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2304      	movs	r3, #4
 8000b64:	757b      	strb	r3, [r7, #21]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b66:	2301      	movs	r3, #1
 8000b68:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4843      	ldr	r0, [pc, #268]	; (8000c80 <SCP_Init+0x218>)
 8000b72:	f000 fe35 	bl	80017e0 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	210b      	movs	r1, #11
 8000b7a:	4841      	ldr	r0, [pc, #260]	; (8000c80 <SCP_Init+0x218>)
 8000b7c:	f000 fecc 	bl	8001918 <MCAL_GPIO_WritePin>
	//red led
	pinConfig.GPIO_PinNumber = GPIO_PIN_0 ;
 8000b80:	2300      	movs	r3, #0
 8000b82:	753b      	strb	r3, [r7, #20]
	pinConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2304      	movs	r3, #4
 8000b86:	757b      	strb	r3, [r7, #21]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	483b      	ldr	r0, [pc, #236]	; (8000c80 <SCP_Init+0x218>)
 8000b94:	f000 fe24 	bl	80017e0 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4838      	ldr	r0, [pc, #224]	; (8000c80 <SCP_Init+0x218>)
 8000b9e:	f000 febb 	bl	8001918 <MCAL_GPIO_WritePin>

	//PIR1
	pinConfig.GPIO_PinNumber = GPIO_PIN_7 ;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	753b      	strb	r3, [r7, #20]
	pinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	757b      	strb	r3, [r7, #21]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000baa:	2301      	movs	r3, #1
 8000bac:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4832      	ldr	r0, [pc, #200]	; (8000c80 <SCP_Init+0x218>)
 8000bb6:	f000 fe13 	bl	80017e0 <MCAL_GPIO_Init>
	//PIR2
	pinConfig.GPIO_PinNumber = GPIO_PIN_1 ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	753b      	strb	r3, [r7, #20]
	pinConfig.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	757b      	strb	r3, [r7, #21]
	pinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75bb      	strb	r3, [r7, #22]
	MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	482c      	ldr	r0, [pc, #176]	; (8000c80 <SCP_Init+0x218>)
 8000bce:	f000 fe07 	bl	80017e0 <MCAL_GPIO_Init>

	/* UART Configratons */
	UART_PinConfig_t uart_config ;
	uart_config.BaudRate 		= UART_BaudRate_9600 ;
 8000bd2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bd6:	607b      	str	r3, [r7, #4]
	uart_config.HwFlowCtl 		= UART_HwFlowCtl_NONE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	72fb      	strb	r3, [r7, #11]
	uart_config.IRQ_Enable 		= UART_IRQ_Enable_RXNEIE;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	733b      	strb	r3, [r7, #12]
	uart_config.P_IRQ_CallBack	= usart1_IRQ ;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SCP_Init+0x21c>)
 8000be2:	613b      	str	r3, [r7, #16]
	uart_config.Mode       		= UART_Mode_RX;
 8000be4:	2304      	movs	r3, #4
 8000be6:	703b      	strb	r3, [r7, #0]
	uart_config.Parity	   		= UART_Parity__NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	727b      	strb	r3, [r7, #9]
	uart_config.Payload_Length 	= UART_Payload_Length_8B;
 8000bec:	2300      	movs	r3, #0
 8000bee:	723b      	strb	r3, [r7, #8]
	uart_config.StopBits	   	= UART_StopBits__1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	72bb      	strb	r3, [r7, #10]
	MCAL_UART_Init(USART1, &uart_config);
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4823      	ldr	r0, [pc, #140]	; (8000c88 <SCP_Init+0x220>)
 8000bfa:	f000 fc23 	bl	8001444 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000bfe:	4822      	ldr	r0, [pc, #136]	; (8000c88 <SCP_Init+0x220>)
 8000c00:	f000 fcf8 	bl	80015f4 <MCAL_UART_GPIO_Set_Pins>

	uart_config.BaudRate 		= UART_BaudRate_9600 ;
 8000c04:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000c08:	607b      	str	r3, [r7, #4]
	uart_config.HwFlowCtl 		= UART_HwFlowCtl_NONE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	72fb      	strb	r3, [r7, #11]
	uart_config.IRQ_Enable 		= UART_IRQ_Enable_RXNEIE;
 8000c0e:	2320      	movs	r3, #32
 8000c10:	733b      	strb	r3, [r7, #12]
	uart_config.P_IRQ_CallBack 	= usart2_IRQ ;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <SCP_Init+0x224>)
 8000c14:	613b      	str	r3, [r7, #16]
	uart_config.Mode       		= UART_Mode_RX;
 8000c16:	2304      	movs	r3, #4
 8000c18:	703b      	strb	r3, [r7, #0]
	uart_config.Parity	   		= UART_Parity__NONE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	727b      	strb	r3, [r7, #9]
	uart_config.Payload_Length 	= UART_Payload_Length_8B;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	723b      	strb	r3, [r7, #8]
	uart_config.StopBits	   	= UART_StopBits__1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	72bb      	strb	r3, [r7, #10]
	MCAL_UART_Init(USART2, &uart_config);
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4819      	ldr	r0, [pc, #100]	; (8000c90 <SCP_Init+0x228>)
 8000c2c:	f000 fc0a 	bl	8001444 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART2);
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <SCP_Init+0x228>)
 8000c32:	f000 fcdf 	bl	80015f4 <MCAL_UART_GPIO_Set_Pins>

	/* Servo Initiate */
	Timer2_init();
 8000c36:	f000 fe93 	bl	8001960 <Timer2_init>
	Servo_Motor_init(&servo1);
 8000c3a:	4816      	ldr	r0, [pc, #88]	; (8000c94 <SCP_Init+0x22c>)
 8000c3c:	f7ff fe3e 	bl	80008bc <Servo_Motor_init>
	Servo_Motor_init(&servo2);
 8000c40:	4815      	ldr	r0, [pc, #84]	; (8000c98 <SCP_Init+0x230>)
 8000c42:	f7ff fe3b 	bl	80008bc <Servo_Motor_init>
	Servo_Motor(&servo1, Down_angle);
 8000c46:	215a      	movs	r1, #90	; 0x5a
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <SCP_Init+0x22c>)
 8000c4a:	f7ff fe4f 	bl	80008ec <Servo_Motor>
	Servo_Motor(&servo2, Down_angle);
 8000c4e:	215a      	movs	r1, #90	; 0x5a
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <SCP_Init+0x230>)
 8000c52:	f7ff fe4b 	bl	80008ec <Servo_Motor>

}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000024 	.word	0x20000024
 8000c64:	20000038 	.word	0x20000038
 8000c68:	080022b0 	.word	0x080022b0
 8000c6c:	080022c4 	.word	0x080022c4
 8000c70:	200000ed 	.word	0x200000ed
 8000c74:	080022d4 	.word	0x080022d4
 8000c78:	200000e2 	.word	0x200000e2
 8000c7c:	080022ec 	.word	0x080022ec
 8000c80:	40010800 	.word	0x40010800
 8000c84:	080009a1 	.word	0x080009a1
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	08000a05 	.word	0x08000a05
 8000c90:	40004400 	.word	0x40004400
 8000c94:	20000014 	.word	0x20000014
 8000c98:	2000001c 	.word	0x2000001c

08000c9c <SCP_Options>:

void SCP_Options()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	LCD_Send_string(&lcd1 ,"1.Add ID        ");
 8000ca0:	4906      	ldr	r1, [pc, #24]	; (8000cbc <SCP_Options+0x20>)
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <SCP_Options+0x24>)
 8000ca4:	f7ff fd8d 	bl	80007c2 <LCD_Send_string>
	LCD_Send_string(&lcd1 ,"2.Remove ID     ");
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <SCP_Options+0x28>)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <SCP_Options+0x24>)
 8000cac:	f7ff fd89 	bl	80007c2 <LCD_Send_string>
	LCD_Send_string(&lcd1 ,"3.Exit");
 8000cb0:	4905      	ldr	r1, [pc, #20]	; (8000cc8 <SCP_Options+0x2c>)
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <SCP_Options+0x24>)
 8000cb4:	f7ff fd85 	bl	80007c2 <LCD_Send_string>

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	080022fc 	.word	0x080022fc
 8000cc0:	20000024 	.word	0x20000024
 8000cc4:	08002310 	.word	0x08002310
 8000cc8:	08002324 	.word	0x08002324

08000ccc <SCP_Add_ID>:

void SCP_Add_ID()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	LCD_Clear_Screen(&lcd1);
 8000cd2:	4859      	ldr	r0, [pc, #356]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000cd4:	f7ff fda7 	bl	8000826 <LCD_Clear_Screen>

	uint32_t IDs_number=0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
	uint8_t ch ;

	LCD_Send_string(&lcd1 ,"Enter ID Number :");
 8000cdc:	4957      	ldr	r1, [pc, #348]	; (8000e3c <SCP_Add_ID+0x170>)
 8000cde:	4856      	ldr	r0, [pc, #344]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000ce0:	f7ff fd6f 	bl	80007c2 <LCD_Send_string>
	while((ch= KEYPAD_GetKey())!='#')
 8000ce4:	e017      	b.n	8000d16 <SCP_Add_ID+0x4a>
	{
		if((ch != 0))
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d014      	beq.n	8000d16 <SCP_Add_ID+0x4a>
		{
			LCD_Send_Character(&lcd1,ch);
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4851      	ldr	r0, [pc, #324]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000cf2:	f7ff fce3 	bl	80006bc <LCD_Send_Character>
			IDs_number = (IDs_number==0)? (ch -'0') : ((IDs_number*10)+(ch - '0')) ;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <SCP_Add_ID+0x36>
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	e008      	b.n	8000d14 <SCP_Add_ID+0x48>
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	4413      	add	r3, r2
 8000d12:	3b30      	subs	r3, #48	; 0x30
 8000d14:	607b      	str	r3, [r7, #4]
	while((ch= KEYPAD_GetKey())!='#')
 8000d16:	f7ff fab7 	bl	8000288 <KEYPAD_GetKey>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	70fb      	strb	r3, [r7, #3]
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2b23      	cmp	r3, #35	; 0x23
 8000d22:	d1e0      	bne.n	8000ce6 <SCP_Add_ID+0x1a>
		}
	}
	LCD_Clear_Screen(&lcd1);
 8000d24:	4844      	ldr	r0, [pc, #272]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000d26:	f7ff fd7e 	bl	8000826 <LCD_Clear_Screen>

	if(IDs_number> (3*(slots_number - (last_id_index))))
 8000d2a:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <SCP_Add_ID+0x174>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <SCP_Add_ID+0x178>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	1ad2      	subs	r2, r2, r3
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d971      	bls.n	8000e28 <SCP_Add_ID+0x15c>
	{
		LCD_Send_string(&lcd1 ,"avalible number is : ");
 8000d44:	4940      	ldr	r1, [pc, #256]	; (8000e48 <SCP_Add_ID+0x17c>)
 8000d46:	483c      	ldr	r0, [pc, #240]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000d48:	f7ff fd3b 	bl	80007c2 <LCD_Send_string>
		LCD_Display_Number(&lcd1 ,(3*slots_number - (last_id_index)));
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <SCP_Add_ID+0x174>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	4a3a      	ldr	r2, [pc, #232]	; (8000e44 <SCP_Add_ID+0x178>)
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4835      	ldr	r0, [pc, #212]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000d62:	f7ff fd93 	bl	800088c <LCD_Display_Number>
			IDs_number--;
			LCD_Clear_Screen(&lcd1);
		}
	}

}
 8000d66:	e062      	b.n	8000e2e <SCP_Add_ID+0x162>
			LCD_Send_string(&lcd1 ,"Enter ID :");
 8000d68:	4938      	ldr	r1, [pc, #224]	; (8000e4c <SCP_Add_ID+0x180>)
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000d6c:	f7ff fd29 	bl	80007c2 <LCD_Send_string>
			ch = 0 ;
 8000d70:	2300      	movs	r3, #0
 8000d72:	70fb      	strb	r3, [r7, #3]
			while((ch = KEYPAD_GetKey())!='#')
 8000d74:	e026      	b.n	8000dc4 <SCP_Add_ID+0xf8>
				if(ch != 0)
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d023      	beq.n	8000dc4 <SCP_Add_ID+0xf8>
					LCD_Send_Character(&lcd1,ch);
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482d      	ldr	r0, [pc, #180]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000d82:	f7ff fc9b 	bl	80006bc <LCD_Send_Character>
					IDs_Container[last_id_index] = (IDs_Container[last_id_index]==0)? (ch -'0') : ((IDs_Container[last_id_index]*10)+(ch - '0')) ;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <SCP_Add_ID+0x178>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <SCP_Add_ID+0x184>)
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <SCP_Add_ID+0xd0>
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	3b30      	subs	r3, #48	; 0x30
 8000d9a:	e00d      	b.n	8000db8 <SCP_Add_ID+0xec>
 8000d9c:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <SCP_Add_ID+0x178>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <SCP_Add_ID+0x184>)
 8000da4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	461a      	mov	r2, r3
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	4413      	add	r3, r2
 8000db6:	3b30      	subs	r3, #48	; 0x30
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <SCP_Add_ID+0x178>)
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <SCP_Add_ID+0x184>)
 8000dc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			while((ch = KEYPAD_GetKey())!='#')
 8000dc4:	f7ff fa60 	bl	8000288 <KEYPAD_GetKey>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	70fb      	strb	r3, [r7, #3]
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b23      	cmp	r3, #35	; 0x23
 8000dd0:	d1d1      	bne.n	8000d76 <SCP_Add_ID+0xaa>
			LCD_Clear_Screen(&lcd1);
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000dd4:	f7ff fd27 	bl	8000826 <LCD_Clear_Screen>
			if(Search_ID(IDs_Container[last_id_index]) != last_id_index)
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <SCP_Add_ID+0x178>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <SCP_Add_ID+0x184>)
 8000de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fdb7 	bl	8000958 <Search_ID>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <SCP_Add_ID+0x178>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d008      	beq.n	8000e08 <SCP_Add_ID+0x13c>
				LCD_Send_string(&lcd1 ,"ID is exist     ");
 8000df6:	4917      	ldr	r1, [pc, #92]	; (8000e54 <SCP_Add_ID+0x188>)
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000dfa:	f7ff fce2 	bl	80007c2 <LCD_Send_string>
				LCD_Send_string(&lcd1 ,"ID was not added");
 8000dfe:	4916      	ldr	r1, [pc, #88]	; (8000e58 <SCP_Add_ID+0x18c>)
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000e02:	f7ff fcde 	bl	80007c2 <LCD_Send_string>
 8000e06:	e009      	b.n	8000e1c <SCP_Add_ID+0x150>
				last_id_index++;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <SCP_Add_ID+0x178>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <SCP_Add_ID+0x178>)
 8000e12:	701a      	strb	r2, [r3, #0]
				LCD_Send_string(&lcd1 ,"ID was added:)");
 8000e14:	4911      	ldr	r1, [pc, #68]	; (8000e5c <SCP_Add_ID+0x190>)
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000e18:	f7ff fcd3 	bl	80007c2 <LCD_Send_string>
			IDs_number--;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
			LCD_Clear_Screen(&lcd1);
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <SCP_Add_ID+0x16c>)
 8000e24:	f7ff fcff 	bl	8000826 <LCD_Clear_Screen>
		while(IDs_number > 0)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d19c      	bne.n	8000d68 <SCP_Add_ID+0x9c>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000024 	.word	0x20000024
 8000e3c:	0800232c 	.word	0x0800232c
 8000e40:	200000ed 	.word	0x200000ed
 8000e44:	200000ec 	.word	0x200000ec
 8000e48:	08002340 	.word	0x08002340
 8000e4c:	08002358 	.word	0x08002358
 8000e50:	200000f0 	.word	0x200000f0
 8000e54:	08002364 	.word	0x08002364
 8000e58:	08002378 	.word	0x08002378
 8000e5c:	0800238c 	.word	0x0800238c

08000e60 <SCP_Remove_ID>:

void SCP_Remove_ID()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
	LCD_Clear_Screen(&lcd1);
 8000e66:	4860      	ldr	r0, [pc, #384]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000e68:	f7ff fcdd 	bl	8000826 <LCD_Clear_Screen>
	uint8_t ch=0 ;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]

	LCD_Send_string(&lcd1 ,"1.Delete all IDs");
 8000e70:	495e      	ldr	r1, [pc, #376]	; (8000fec <SCP_Remove_ID+0x18c>)
 8000e72:	485d      	ldr	r0, [pc, #372]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000e74:	f7ff fca5 	bl	80007c2 <LCD_Send_string>
	LCD_Send_string(&lcd1 ,"2.Other");
 8000e78:	495d      	ldr	r1, [pc, #372]	; (8000ff0 <SCP_Remove_ID+0x190>)
 8000e7a:	485b      	ldr	r0, [pc, #364]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000e7c:	f7ff fca1 	bl	80007c2 <LCD_Send_string>

	while((ch=KEYPAD_GetKey())== 0);
 8000e80:	f7ff fa02 	bl	8000288 <KEYPAD_GetKey>
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f8      	beq.n	8000e80 <SCP_Remove_ID+0x20>
	LCD_Clear_Screen(&lcd1);
 8000e8e:	4856      	ldr	r0, [pc, #344]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000e90:	f7ff fcc9 	bl	8000826 <LCD_Clear_Screen>

	if(ch == '1')
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b31      	cmp	r3, #49	; 0x31
 8000e98:	d107      	bne.n	8000eaa <SCP_Remove_ID+0x4a>
	{
		last_id_index = 0 ;
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
		LCD_Send_string(&lcd1 ,"All Ids were deleted!");
 8000ea0:	4955      	ldr	r1, [pc, #340]	; (8000ff8 <SCP_Remove_ID+0x198>)
 8000ea2:	4851      	ldr	r0, [pc, #324]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000ea4:	f7ff fc8d 	bl	80007c2 <LCD_Send_string>

			IDs_number--;
			LCD_Clear_Screen(&lcd1);
		}
	}
}
 8000ea8:	e099      	b.n	8000fde <SCP_Remove_ID+0x17e>
	else if(ch == '2')
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b32      	cmp	r3, #50	; 0x32
 8000eae:	f040 8096 	bne.w	8000fde <SCP_Remove_ID+0x17e>
		uint32_t IDs_number=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
		LCD_Send_string(&lcd1 ,"Enter ID Number maximum (");
 8000eb6:	4951      	ldr	r1, [pc, #324]	; (8000ffc <SCP_Remove_ID+0x19c>)
 8000eb8:	484b      	ldr	r0, [pc, #300]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000eba:	f7ff fc82 	bl	80007c2 <LCD_Send_string>
		LCD_Display_Number(&lcd1,last_id_index);
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4848      	ldr	r0, [pc, #288]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000ec6:	f7ff fce1 	bl	800088c <LCD_Display_Number>
		LCD_Send_string(&lcd1 ,"):");
 8000eca:	494d      	ldr	r1, [pc, #308]	; (8001000 <SCP_Remove_ID+0x1a0>)
 8000ecc:	4846      	ldr	r0, [pc, #280]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000ece:	f7ff fc78 	bl	80007c2 <LCD_Send_string>
		while((ch= KEYPAD_GetKey())!='#')
 8000ed2:	e017      	b.n	8000f04 <SCP_Remove_ID+0xa4>
			if((ch != 0))
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d014      	beq.n	8000f04 <SCP_Remove_ID+0xa4>
				LCD_Send_Character(&lcd1,ch);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4842      	ldr	r0, [pc, #264]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000ee0:	f7ff fbec 	bl	80006bc <LCD_Send_Character>
				IDs_number = (IDs_number==0)? (ch -'0') : ((IDs_number*10)+(ch - '0')) ;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <SCP_Remove_ID+0x90>
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b30      	subs	r3, #48	; 0x30
 8000eee:	e008      	b.n	8000f02 <SCP_Remove_ID+0xa2>
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	461a      	mov	r2, r3
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4413      	add	r3, r2
 8000f00:	3b30      	subs	r3, #48	; 0x30
 8000f02:	60fb      	str	r3, [r7, #12]
		while((ch= KEYPAD_GetKey())!='#')
 8000f04:	f7ff f9c0 	bl	8000288 <KEYPAD_GetKey>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b23      	cmp	r3, #35	; 0x23
 8000f10:	d1e0      	bne.n	8000ed4 <SCP_Remove_ID+0x74>
		LCD_Clear_Screen(&lcd1);
 8000f12:	4835      	ldr	r0, [pc, #212]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000f14:	f7ff fc87 	bl	8000826 <LCD_Clear_Screen>
		while(IDs_number > 0)
 8000f18:	e05e      	b.n	8000fd8 <SCP_Remove_ID+0x178>
			LCD_Send_string(&lcd1 ,"Enter ID :");
 8000f1a:	493a      	ldr	r1, [pc, #232]	; (8001004 <SCP_Remove_ID+0x1a4>)
 8000f1c:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000f1e:	f7ff fc50 	bl	80007c2 <LCD_Send_string>
			ch = 0 ;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
			uint32_t id = 0 ;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
			while((ch = KEYPAD_GetKey())!='#')
 8000f2a:	e017      	b.n	8000f5c <SCP_Remove_ID+0xfc>
				if(ch != 0)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d014      	beq.n	8000f5c <SCP_Remove_ID+0xfc>
					LCD_Send_Character(&lcd1,ch);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4619      	mov	r1, r3
 8000f36:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000f38:	f7ff fbc0 	bl	80006bc <LCD_Send_Character>
					id = (id==0)? (ch -'0') : ((id*10)+(ch - '0')) ;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <SCP_Remove_ID+0xe8>
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3b30      	subs	r3, #48	; 0x30
 8000f46:	e008      	b.n	8000f5a <SCP_Remove_ID+0xfa>
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	461a      	mov	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4413      	add	r3, r2
 8000f58:	3b30      	subs	r3, #48	; 0x30
 8000f5a:	60bb      	str	r3, [r7, #8]
			while((ch = KEYPAD_GetKey())!='#')
 8000f5c:	f7ff f994 	bl	8000288 <KEYPAD_GetKey>
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b23      	cmp	r3, #35	; 0x23
 8000f68:	d1e0      	bne.n	8000f2c <SCP_Remove_ID+0xcc>
			LCD_Clear_Screen(&lcd1);
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000f6c:	f7ff fc5b 	bl	8000826 <LCD_Clear_Screen>
			if(Search_ID(id) == last_id_index)
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f7ff fcf1 	bl	8000958 <Search_ID>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d104      	bne.n	8000f8c <SCP_Remove_ID+0x12c>
				LCD_Send_string(&lcd1 ,"ID is not exist ");
 8000f82:	4921      	ldr	r1, [pc, #132]	; (8001008 <SCP_Remove_ID+0x1a8>)
 8000f84:	4818      	ldr	r0, [pc, #96]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000f86:	f7ff fc1c 	bl	80007c2 <LCD_Send_string>
 8000f8a:	e01f      	b.n	8000fcc <SCP_Remove_ID+0x16c>
				index = Search_ID(id);
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f7ff fce3 	bl	8000958 <Search_ID>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71bb      	strb	r3, [r7, #6]
				last_id_index--;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000fa0:	701a      	strb	r2, [r3, #0]
				IDs_Container[index] = IDs_Container[last_id_index];
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <SCP_Remove_ID+0x1ac>)
 8000fac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000fb0:	4916      	ldr	r1, [pc, #88]	; (800100c <SCP_Remove_ID+0x1ac>)
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				IDs_Container[last_id_index]=0;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <SCP_Remove_ID+0x194>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <SCP_Remove_ID+0x1ac>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				LCD_Send_string(&lcd1 ,"ID was deleted:)");
 8000fc4:	4912      	ldr	r1, [pc, #72]	; (8001010 <SCP_Remove_ID+0x1b0>)
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000fc8:	f7ff fbfb 	bl	80007c2 <LCD_Send_string>
			IDs_number--;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
			LCD_Clear_Screen(&lcd1);
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <SCP_Remove_ID+0x188>)
 8000fd4:	f7ff fc27 	bl	8000826 <LCD_Clear_Screen>
		while(IDs_number > 0)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d19d      	bne.n	8000f1a <SCP_Remove_ID+0xba>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000024 	.word	0x20000024
 8000fec:	0800239c 	.word	0x0800239c
 8000ff0:	080023b0 	.word	0x080023b0
 8000ff4:	200000ec 	.word	0x200000ec
 8000ff8:	080023b8 	.word	0x080023b8
 8000ffc:	080023d0 	.word	0x080023d0
 8001000:	080023ec 	.word	0x080023ec
 8001004:	08002358 	.word	0x08002358
 8001008:	080023f0 	.word	0x080023f0
 800100c:	200000f0 	.word	0x200000f0
 8001010:	08002404 	.word	0x08002404

08001014 <SCP_Entry_Process>:

void SCP_Entry_Process(uint32_t id)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	if(avalible_slots >0)
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <SCP_Entry_Process+0xb8>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d048      	beq.n	80010b6 <SCP_Entry_Process+0xa2>
	{

		if(Search_ID(id) != last_id_index)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fc97 	bl	8000958 <Search_ID>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SCP_Entry_Process+0xbc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d02c      	beq.n	8001090 <SCP_Entry_Process+0x7c>
		{
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	210b      	movs	r1, #11
 800103a:	4826      	ldr	r0, [pc, #152]	; (80010d4 <SCP_Entry_Process+0xc0>)
 800103c:	f000 fc6c 	bl	8001918 <MCAL_GPIO_WritePin>
			avalible_slots-- ;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <SCP_Entry_Process+0xb8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <SCP_Entry_Process+0xb8>)
 800104a:	701a      	strb	r2, [r3, #0]
			LCD_Send_string(&lcd2 ,"valid ID ,you can enter :)");
 800104c:	4922      	ldr	r1, [pc, #136]	; (80010d8 <SCP_Entry_Process+0xc4>)
 800104e:	4823      	ldr	r0, [pc, #140]	; (80010dc <SCP_Entry_Process+0xc8>)
 8001050:	f7ff fbb7 	bl	80007c2 <LCD_Send_string>
			while(!(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)));
 8001054:	bf00      	nop
 8001056:	2107      	movs	r1, #7
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <SCP_Entry_Process+0xc0>)
 800105a:	f000 fc43 	bl	80018e4 <MCAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f8      	beq.n	8001056 <SCP_Entry_Process+0x42>
			Servo_Motor(&servo1,UP_angle);
 8001064:	2100      	movs	r1, #0
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <SCP_Entry_Process+0xcc>)
 8001068:	f7ff fc40 	bl	80008ec <Servo_Motor>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
 800106c:	bf00      	nop
 800106e:	2107      	movs	r1, #7
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <SCP_Entry_Process+0xc0>)
 8001072:	f000 fc37 	bl	80018e4 <MCAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f8      	bne.n	800106e <SCP_Entry_Process+0x5a>
			Servo_Motor(&servo1, Down_angle);
 800107c:	215a      	movs	r1, #90	; 0x5a
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <SCP_Entry_Process+0xcc>)
 8001080:	f7ff fc34 	bl	80008ec <Servo_Motor>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	210b      	movs	r1, #11
 8001088:	4812      	ldr	r0, [pc, #72]	; (80010d4 <SCP_Entry_Process+0xc0>)
 800108a:	f000 fc45 	bl	8001918 <MCAL_GPIO_WritePin>
 800108e:	e016      	b.n	80010be <SCP_Entry_Process+0xaa>
		}
		else
		{
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <SCP_Entry_Process+0xc0>)
 8001096:	f000 fc3f 	bl	8001918 <MCAL_GPIO_WritePin>
			LCD_Send_string(&lcd2 ,"not valid ID:)");
 800109a:	4912      	ldr	r1, [pc, #72]	; (80010e4 <SCP_Entry_Process+0xd0>)
 800109c:	480f      	ldr	r0, [pc, #60]	; (80010dc <SCP_Entry_Process+0xc8>)
 800109e:	f7ff fb90 	bl	80007c2 <LCD_Send_string>
			dms(500);
 80010a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a6:	f000 fc97 	bl	80019d8 <dms>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80010aa:	2201      	movs	r2, #1
 80010ac:	2100      	movs	r1, #0
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <SCP_Entry_Process+0xc0>)
 80010b0:	f000 fc32 	bl	8001918 <MCAL_GPIO_WritePin>
 80010b4:	e003      	b.n	80010be <SCP_Entry_Process+0xaa>
		}
	}
	else
	{
		LCD_Send_string(&lcd2,"Parking is Full try again later:(");
 80010b6:	490c      	ldr	r1, [pc, #48]	; (80010e8 <SCP_Entry_Process+0xd4>)
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <SCP_Entry_Process+0xc8>)
 80010ba:	f7ff fb82 	bl	80007c2 <LCD_Send_string>
	}
	LCD_Clear_Screen(&lcd2);
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <SCP_Entry_Process+0xc8>)
 80010c0:	f7ff fbb1 	bl	8000826 <LCD_Clear_Screen>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000e2 	.word	0x200000e2
 80010d0:	200000ec 	.word	0x200000ec
 80010d4:	40010800 	.word	0x40010800
 80010d8:	08002418 	.word	0x08002418
 80010dc:	20000038 	.word	0x20000038
 80010e0:	20000014 	.word	0x20000014
 80010e4:	08002434 	.word	0x08002434
 80010e8:	08002444 	.word	0x08002444

080010ec <SCP_Exit_Process>:

void SCP_Exit_Process(uint32_t id)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	if(Search_ID(id) != last_id_index)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fc2f 	bl	8000958 <Search_ID>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <SCP_Exit_Process+0x60>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d01d      	beq.n	8001142 <SCP_Exit_Process+0x56>
	{
		avalible_slots++;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SCP_Exit_Process+0x64>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SCP_Exit_Process+0x64>)
 8001110:	701a      	strb	r2, [r3, #0]
		while(!(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8001112:	bf00      	nop
 8001114:	2101      	movs	r1, #1
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <SCP_Exit_Process+0x68>)
 8001118:	f000 fbe4 	bl	80018e4 <MCAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f8      	beq.n	8001114 <SCP_Exit_Process+0x28>
		Servo_Motor(&servo2,UP_angle);
 8001122:	2100      	movs	r1, #0
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <SCP_Exit_Process+0x6c>)
 8001126:	f7ff fbe1 	bl	80008ec <Servo_Motor>
		while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1));
 800112a:	bf00      	nop
 800112c:	2101      	movs	r1, #1
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <SCP_Exit_Process+0x68>)
 8001130:	f000 fbd8 	bl	80018e4 <MCAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f8      	bne.n	800112c <SCP_Exit_Process+0x40>
		Servo_Motor(&servo2, Down_angle);
 800113a:	215a      	movs	r1, #90	; 0x5a
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <SCP_Exit_Process+0x6c>)
 800113e:	f7ff fbd5 	bl	80008ec <Servo_Motor>
	}
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000ec 	.word	0x200000ec
 8001150:	200000e2 	.word	0x200000e2
 8001154:	40010800 	.word	0x40010800
 8001158:	2000001c 	.word	0x2000001c

0800115c <clock_init>:
#include "SCP_application.h"

extern LCD_Config_t lcd1;

void clock_init()
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <clock_init+0x3c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <clock_init+0x3c>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <clock_init+0x3c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <clock_init+0x3c>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]

	RCC_USART1_CLK_EN();
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <clock_init+0x3c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <clock_init+0x3c>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <clock_init+0x3c>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <clock_init+0x3c>)
 800118a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118e:	61d3      	str	r3, [r2, #28]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000

0800119c <main>:
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	clock_init();
 80011a2:	f7ff ffdb 	bl	800115c <clock_init>
	SCP_Init();
 80011a6:	f7ff fc5f 	bl	8000a68 <SCP_Init>

	uint8_t operation_ch = 0 ;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
    /* Loop forever */
	while(1)
	{
		if((operation_ch= KEYPAD_GetKey())=='*')
 80011ae:	f7ff f86b 	bl	8000288 <KEYPAD_GetKey>
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b2a      	cmp	r3, #42	; 0x2a
 80011ba:	d1f8      	bne.n	80011ae <main+0x12>
		{
			//	Gates system stop till Admin updates.
			NVIC_IRQ37_USART1_DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <main+0x94>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <main+0x94>)
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <main+0x94>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <main+0x94>)
 80011ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d2:	6013      	str	r3, [r2, #0]

			LCD_Clear_Screen(&lcd1);
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <main+0x98>)
 80011d6:	f7ff fb26 	bl	8000826 <LCD_Clear_Screen>
			SCP_Options();
 80011da:	f7ff fd5f 	bl	8000c9c <SCP_Options>
			operation_ch =0 ;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
			while((operation_ch = KEYPAD_GetKey())== 0);
 80011e2:	f7ff f851 	bl	8000288 <KEYPAD_GetKey>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <main+0x46>

			switch(operation_ch)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b31      	cmp	r3, #49	; 0x31
 80011f4:	d002      	beq.n	80011fc <main+0x60>
 80011f6:	2b32      	cmp	r3, #50	; 0x32
 80011f8:	d003      	beq.n	8001202 <main+0x66>
				break;
			case '2':
				SCP_Remove_ID();
				break;
			default:
				break;
 80011fa:	e005      	b.n	8001208 <main+0x6c>
				SCP_Add_ID();
 80011fc:	f7ff fd66 	bl	8000ccc <SCP_Add_ID>
				break;
 8001200:	e002      	b.n	8001208 <main+0x6c>
				SCP_Remove_ID();
 8001202:	f7ff fe2d 	bl	8000e60 <SCP_Remove_ID>
				break;
 8001206:	bf00      	nop
			}

			LCD_Clear_Screen(&lcd1);
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <main+0x98>)
 800120a:	f7ff fb0c 	bl	8000826 <LCD_Clear_Screen>
			LCD_Send_string(&lcd1 ,"For options '*'");
 800120e:	490a      	ldr	r1, [pc, #40]	; (8001238 <main+0x9c>)
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <main+0x98>)
 8001212:	f7ff fad6 	bl	80007c2 <LCD_Send_string>

			NVIC_IRQ37_USART1_ENABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <main+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <main+0xa0>)
 800121c:	f043 0320 	orr.w	r3, r3, #32
 8001220:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <main+0xa0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <main+0xa0>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	6013      	str	r3, [r2, #0]
		if((operation_ch= KEYPAD_GetKey())=='*')
 800122e:	e7be      	b.n	80011ae <main+0x12>
 8001230:	e000e184 	.word	0xe000e184
 8001234:	20000024 	.word	0x20000024
 8001238:	08002468 	.word	0x08002468
 800123c:	e000e104 	.word	0xe000e104

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f000 fbca 	bl	8001a08 <__errno>
 8001274:	4602      	mov	r2, r0
 8001276:	230c      	movs	r3, #12
 8001278:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20002800 	.word	0x20002800
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200000cc 	.word	0x200000cc
 80012a8:	20000200 	.word	0x20000200

080012ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	; (80012ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	; (80012f8 <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012da:	f000 fb9b 	bl	8001a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012de:	f7ff ff5d 	bl	800119c <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   r0, =_estack
 80012e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80012f0:	080024bc 	.word	0x080024bc
  ldr r2, =_sbss
 80012f4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80012f8:	20000200 	.word	0x20000200

080012fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_2_IRQHandler>
	...

08001300 <SPI1_IRQHandler>:
* 					IRQ
* ===============================================
*/

void SPI1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	S_IRQ_SRC IRQ_src ;

	IRQ_src.TXE =  (((SPI1->SPI_SR)>>1)&1);
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <SPI1_IRQHandler+0x54>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	f362 0300 	bfi	r3, r2, #0, #1
 8001318:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE = (((SPI1->SPI_SR)>>0)&1);
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <SPI1_IRQHandler+0x54>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	f362 0341 	bfi	r3, r2, #1, #1
 800132a:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI = (((SPI1->SPI_SR)>>4)&1);;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <SPI1_IRQHandler+0x54>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	793b      	ldrb	r3, [r7, #4]
 800133a:	f362 0382 	bfi	r3, r2, #2, #1
 800133e:	713b      	strb	r3, [r7, #4]

	G_SPI_Cfg[0]->P_IRQ_CallBack(IRQ_src);
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SPI1_IRQHandler+0x58>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	7938      	ldrb	r0, [r7, #4]
 8001348:	4798      	blx	r3
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40013000 	.word	0x40013000
 8001358:	200001b8 	.word	0x200001b8

0800135c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	S_IRQ_SRC IRQ_src ;

	IRQ_src.TXE =  (((SPI2->SPI_SR)>>1)&1);
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <SPI2_IRQHandler+0x54>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	085b      	lsrs	r3, r3, #1
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	793b      	ldrb	r3, [r7, #4]
 8001370:	f362 0300 	bfi	r3, r2, #0, #1
 8001374:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE = (((SPI2->SPI_SR)>>0)&1);
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <SPI2_IRQHandler+0x54>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	793b      	ldrb	r3, [r7, #4]
 8001382:	f362 0341 	bfi	r3, r2, #1, #1
 8001386:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI = (((SPI2->SPI_SR)>>4)&1);
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <SPI2_IRQHandler+0x54>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	793b      	ldrb	r3, [r7, #4]
 8001396:	f362 0382 	bfi	r3, r2, #2, #1
 800139a:	713b      	strb	r3, [r7, #4]

	G_SPI_Cfg[1]->P_IRQ_CallBack(IRQ_src);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SPI2_IRQHandler+0x58>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	7938      	ldrb	r0, [r7, #4]
 80013a4:	4798      	blx	r3
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40003800 	.word	0x40003800
 80013b4:	200001b8 	.word	0x200001b8

080013b8 <MCAL_RCC_GET_SYSCLK_Freq>:
 * =======================================================================================
 * 									APIS
 * =======================================================================================
 */
uint32_t MCAL_RCC_GET_SYSCLK_Freq()
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable
*/
	switch(((RCC->CFGR)>>2)& 0b11)
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MCAL_RCC_GET_SYSCLK_Freq+0x30>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d006      	beq.n	80013d8 <MCAL_RCC_GET_SYSCLK_Freq+0x20>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d302      	bcc.n	80013d4 <MCAL_RCC_GET_SYSCLK_Freq+0x1c>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d004      	beq.n	80013dc <MCAL_RCC_GET_SYSCLK_Freq+0x24>
 80013d2:	e005      	b.n	80013e0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <MCAL_RCC_GET_SYSCLK_Freq+0x34>)
 80013d6:	e003      	b.n	80013e0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 1:

		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 80013da:	e001      	b.n	80013e0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 2:

		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 80013de:	e7ff      	b.n	80013e0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	}
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	007a1200 	.word	0x007a1200
 80013f0:	00f42400 	.word	0x00f42400

080013f4 <MCAL_RCC_GET_PCLK1_Freq>:
uint32_t MCAL_RCC_GET_HCLK_Freq()
{
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> AHBPrescTable[(((RCC->CFGR)>>4)& 0xF)]);
}
uint32_t MCAL_RCC_GET_PCLK1_Freq()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>8)& 0b111)]);
 80013f8:	f7ff ffde 	bl	80013b8 <MCAL_RCC_GET_SYSCLK_Freq>
 80013fc:	4601      	mov	r1, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <MCAL_RCC_GET_PCLK1_Freq+0x20>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <MCAL_RCC_GET_PCLK1_Freq+0x24>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	08002478 	.word	0x08002478

0800141c <MCAL_RCC_GET_PCLK2_Freq>:
uint32_t MCAL_RCC_GET_PCLK2_Freq()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>11)& 0b111)]);
 8001420:	f7ff ffca 	bl	80013b8 <MCAL_RCC_GET_SYSCLK_Freq>
 8001424:	4601      	mov	r1, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <MCAL_RCC_GET_PCLK2_Freq+0x20>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0adb      	lsrs	r3, r3, #11
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <MCAL_RCC_GET_PCLK2_Freq+0x24>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	08002478 	.word	0x08002478

08001444 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_PinConfig_t* UART_Config)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	uint32_t pclk ;

	//	enable the Clock for given USART peripheral
	if(USARTx == USART1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a62      	ldr	r2, [pc, #392]	; (80015dc <MCAL_UART_Init+0x198>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d116      	bne.n	8001484 <MCAL_UART_Init+0x40>
	{
		G_UART_Config[0].Payload_Length = UART_Config->Payload_Length ;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7a1a      	ldrb	r2, [r3, #8]
 800145a:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <MCAL_UART_Init+0x19c>)
 800145c:	721a      	strb	r2, [r3, #8]
		G_UART_Config[0].HwFlowCtl = UART_Config->HwFlowCtl ;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7ada      	ldrb	r2, [r3, #11]
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <MCAL_UART_Init+0x19c>)
 8001464:	72da      	strb	r2, [r3, #11]
		G_UART_Config[0].Parity = UART_Config->Parity ;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7a5a      	ldrb	r2, [r3, #9]
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <MCAL_UART_Init+0x19c>)
 800146c:	725a      	strb	r2, [r3, #9]
		G_UART_Config[0].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <MCAL_UART_Init+0x19c>)
 8001474:	6113      	str	r3, [r2, #16]
		RCC_USART1_CLK_EN();
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	e037      	b.n	80014f4 <MCAL_UART_Init+0xb0>

	}else if(USARTx == USART2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <MCAL_UART_Init+0x1a4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d116      	bne.n	80014ba <MCAL_UART_Init+0x76>
	{
		G_UART_Config[1].Payload_Length = UART_Config->Payload_Length ;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	7a1a      	ldrb	r2, [r3, #8]
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <MCAL_UART_Init+0x19c>)
 8001492:	771a      	strb	r2, [r3, #28]
		G_UART_Config[1].HwFlowCtl = UART_Config->HwFlowCtl ;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	7ada      	ldrb	r2, [r3, #11]
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <MCAL_UART_Init+0x19c>)
 800149a:	77da      	strb	r2, [r3, #31]
		G_UART_Config[1].Parity = UART_Config->Parity ;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	7a5a      	ldrb	r2, [r3, #9]
 80014a0:	4b4f      	ldr	r3, [pc, #316]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014a2:	775a      	strb	r2, [r3, #29]
		G_UART_Config[1].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014aa:	6253      	str	r3, [r2, #36]	; 0x24
		RCC_USART2_CLK_EN();
 80014ac:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b6:	61d3      	str	r3, [r2, #28]
 80014b8:	e01c      	b.n	80014f4 <MCAL_UART_Init+0xb0>

	}else if(USARTx == USART3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <MCAL_UART_Init+0x1a8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d118      	bne.n	80014f4 <MCAL_UART_Init+0xb0>
	{
		G_UART_Config[2].Payload_Length = UART_Config->Payload_Length ;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7a1a      	ldrb	r2, [r3, #8]
 80014c6:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		G_UART_Config[2].HwFlowCtl = UART_Config->HwFlowCtl ;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7ada      	ldrb	r2, [r3, #11]
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014d2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		G_UART_Config[2].Parity = UART_Config->Parity ;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7a5a      	ldrb	r2, [r3, #9]
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		G_UART_Config[2].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <MCAL_UART_Init+0x19c>)
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38
		RCC_USART3_CLK_EN();
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <MCAL_UART_Init+0x1a0>)
 80014ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f2:	61d3      	str	r3, [r2, #28]
	}

	//  Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	60da      	str	r2, [r3, #12]

	//	Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->Mode ;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	7a12      	ldrb	r2, [r2, #8]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	7a52      	ldrb	r2, [r2, #9]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	7a92      	ldrb	r2, [r2, #10]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	7ad2      	ldrb	r2, [r2, #11]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a24      	ldr	r2, [pc, #144]	; (80015dc <MCAL_UART_Init+0x198>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d103      	bne.n	8001556 <MCAL_UART_Init+0x112>
	{
		pclk = MCAL_RCC_GET_PCLK1_Freq();
 800154e:	f7ff ff51 	bl	80013f4 <MCAL_RCC_GET_PCLK1_Freq>
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	e002      	b.n	800155c <MCAL_UART_Init+0x118>
	}
	else
	{
		pclk = MCAL_RCC_GET_PCLK2_Freq();
 8001556:	f7ff ff61 	bl	800141c <MCAL_RCC_GET_PCLK2_Freq>
 800155a:	60f8      	str	r0, [r7, #12]
	}

	USARTx->BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	011a      	lsls	r2, r3, #4
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	fbb1 f3f3 	udiv	r3, r1, r3
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d026      	beq.n	80015d4 <MCAL_UART_Init+0x190>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	7b12      	ldrb	r2, [r2, #12]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <MCAL_UART_Init+0x198>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d106      	bne.n	80015aa <MCAL_UART_Init+0x166>
			NVIC_IRQ37_USART1_ENABLE ;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE ;

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_ENABLE ;
	}
}
 80015a8:	e014      	b.n	80015d4 <MCAL_UART_Init+0x190>
		else if ( USARTx == USART2 )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <MCAL_UART_Init+0x1a4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d106      	bne.n	80015c0 <MCAL_UART_Init+0x17c>
			NVIC_IRQ38_USART2_ENABLE ;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 80015b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	e009      	b.n	80015d4 <MCAL_UART_Init+0x190>
		else if ( USARTx == USART3 )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <MCAL_UART_Init+0x1a8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d105      	bne.n	80015d4 <MCAL_UART_Init+0x190>
			NVIC_IRQ39_USART3_ENABLE ;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <MCAL_UART_Init+0x1ac>)
 80015ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013800 	.word	0x40013800
 80015e0:	200001c0 	.word	0x200001c0
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40004800 	.word	0x40004800
 80015f0:	e000e104 	.word	0xe000e104

080015f4 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <MCAL_UART_GPIO_Set_Pins+0xb0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d116      	bne.n	8001632 <MCAL_UART_GPIO_Set_Pins+0x3e>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001604:	2309      	movs	r3, #9
 8001606:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001608:	2306      	movs	r3, #6
 800160a:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800160c:	2301      	movs	r3, #1
 800160e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	4824      	ldr	r0, [pc, #144]	; (80016a8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 8001618:	f000 f8e2 	bl	80017e0 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800161c:	230a      	movs	r3, #10
 800161e:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8001620:	2308      	movs	r3, #8
 8001622:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	481f      	ldr	r0, [pc, #124]	; (80016a8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 800162c:	f000 f8d8 	bl	80017e0 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8001630:	e034      	b.n	800169c <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART2 )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <MCAL_UART_GPIO_Set_Pins+0x74>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800163a:	2302      	movs	r3, #2
 800163c:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800163e:	2306      	movs	r3, #6
 8001640:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001642:	2301      	movs	r3, #1
 8001644:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 800164e:	f000 f8c7 	bl	80017e0 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001652:	2303      	movs	r3, #3
 8001654:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8001656:	2308      	movs	r3, #8
 8001658:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4619      	mov	r1, r3
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MCAL_UART_GPIO_Set_Pins+0xb4>)
 8001662:	f000 f8bd 	bl	80017e0 <MCAL_GPIO_Init>
}
 8001666:	e019      	b.n	800169c <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART3 )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d115      	bne.n	800169c <MCAL_UART_GPIO_Set_Pins+0xa8>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001670:	230a      	movs	r3, #10
 8001672:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8001674:	2306      	movs	r3, #6
 8001676:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001678:	2301      	movs	r3, #1
 800167a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8001684:	f000 f8ac 	bl	80017e0 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001688:	230b      	movs	r3, #11
 800168a:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 800168c:	2308      	movs	r3, #8
 800168e:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8001698:	f000 f8a2 	bl	80017e0 <MCAL_GPIO_Init>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40004800 	.word	0x40004800
 80016b4:	40010c00 	.word	0x40010c00

080016b8 <MCAL_UART_ReceiveData>:
			//			When receiving with the parity enabled, the value read in the MSB bit is the received parity
			//			bit

 */
void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE(Read data register not empty) flag is set in the SR
	if (PollingEn == enable)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <MCAL_UART_ReceiveData+0x22>
		while( ! (USARTx->SR & 1<<5 ));
 80016cc:	bf00      	nop
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f9      	beq.n	80016ce <MCAL_UART_ReceiveData+0x16>

	//Check the USART_WordLength item for 9BIT or 8BIT in a frame
	if ( USARTx == USART1 )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <MCAL_UART_ReceiveData+0xdc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d118      	bne.n	8001714 <MCAL_UART_ReceiveData+0x5c>
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0xFF );
			}

		}else if (G_UART_Config[0].Payload_Length == UART_Payload_Length_8B)
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 80016e4:	7a1b      	ldrb	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d14f      	bne.n	800178a <MCAL_UART_ReceiveData+0xd2>
		{
			if(G_UART_Config[0].Parity == UART_Parity__NONE)
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 80016ec:	7a5b      	ldrb	r3, [r3, #9]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <MCAL_UART_ReceiveData+0x4a>
			{
				//no parity So all 8bit are considered data
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	801a      	strh	r2, [r3, #0]
			}
		}

	}

}
 8001700:	e043      	b.n	800178a <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	b29b      	uxth	r3, r3
 8001708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800170c:	b29a      	uxth	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	801a      	strh	r2, [r3, #0]
}
 8001712:	e03a      	b.n	800178a <MCAL_UART_ReceiveData+0xd2>
	else if ( USARTx == USART2 )
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <MCAL_UART_ReceiveData+0xe4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d118      	bne.n	800174e <MCAL_UART_ReceiveData+0x96>
		}else if (G_UART_Config[1].Payload_Length == UART_Payload_Length_8B)
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 800171e:	7f1b      	ldrb	r3, [r3, #28]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d132      	bne.n	800178a <MCAL_UART_ReceiveData+0xd2>
			if(G_UART_Config[1].Parity == UART_Parity__NONE)
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 8001726:	7f5b      	ldrb	r3, [r3, #29]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <MCAL_UART_ReceiveData+0x84>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	b29b      	uxth	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	b29a      	uxth	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	801a      	strh	r2, [r3, #0]
}
 800173a:	e026      	b.n	800178a <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	b29b      	uxth	r3, r3
 8001742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001746:	b29a      	uxth	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	801a      	strh	r2, [r3, #0]
}
 800174c:	e01d      	b.n	800178a <MCAL_UART_ReceiveData+0xd2>
	else if ( USARTx == USART3 )
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MCAL_UART_ReceiveData+0xe8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d119      	bne.n	800178a <MCAL_UART_ReceiveData+0xd2>
		}else if (G_UART_Config[2].Payload_Length == UART_Payload_Length_8B)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 8001758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800175c:	2b00      	cmp	r3, #0
 800175e:	d114      	bne.n	800178a <MCAL_UART_ReceiveData+0xd2>
			if(G_UART_Config[2].Parity == UART_Parity__NONE)
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MCAL_UART_ReceiveData+0xe0>)
 8001762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <MCAL_UART_ReceiveData+0xc2>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29a      	uxth	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	801a      	strh	r2, [r3, #0]
}
 8001778:	e007      	b.n	800178a <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	b29b      	uxth	r3, r3
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	b29a      	uxth	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	801a      	strh	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40013800 	.word	0x40013800
 8001798:	200001c0 	.word	0x200001c0
 800179c:	40004400 	.word	0x40004400
 80017a0:	40004800 	.word	0x40004800

080017a4 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0

	G_UART_Config[0].P_IRQ_CallBack () ;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <USART1_IRQHandler+0x10>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4798      	blx	r3

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001c0 	.word	0x200001c0

080017b8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	G_UART_Config[1].P_IRQ_CallBack () ;
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <USART2_IRQHandler+0x10>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	4798      	blx	r3

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001c0 	.word	0x200001c0

080017cc <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	G_UART_Config[2].P_IRQ_CallBack () ;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <USART3_IRQHandler+0x10>)
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	4798      	blx	r3


}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001c0 	.word	0x200001c0

080017e0 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister ;
	uint8_t PIN_Config = 0 ;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b07      	cmp	r3, #7
 80017f4:	d801      	bhi.n	80017fa <MCAL_GPIO_Init+0x1a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <MCAL_GPIO_Init+0x1e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8_t CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b07      	cmp	r3, #7
 8001806:	d804      	bhi.n	8001812 <MCAL_GPIO_Init+0x32>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	e005      	b.n	800181e <MCAL_GPIO_Init+0x3e>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3338      	adds	r3, #56	; 0x38
 8001818:	b2db      	uxtb	r3, r3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	210f      	movs	r1, #15
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	43d2      	mvns	r2, r2
 800182e:	401a      	ands	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d912      	bls.n	8001862 <MCAL_GPIO_Init+0x82>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d00e      	beq.n	8001862 <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	3b04      	subs	r3, #4
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	b25a      	sxtb	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b25b      	sxtb	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e032      	b.n	80018c8 <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <MCAL_GPIO_Init+0x92>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	75fb      	strb	r3, [r7, #23]
 8001880:	e022      	b.n	80018c8 <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	2b08      	cmp	r3, #8
 8001888:	d102      	bne.n	8001890 <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 800188a:	2304      	movs	r3, #4
 800188c:	75fb      	strb	r3, [r7, #23]
 800188e:	e01b      	b.n	80018c8 <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 8001890:	2308      	movs	r3, #8
 8001892:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	785b      	ldrb	r3, [r3, #1]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d10a      	bne.n	80018b2 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	4611      	mov	r1, r2
 80018a6:	2201      	movs	r2, #1
 80018a8:	408a      	lsls	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	e00a      	b.n	80018c8 <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	408a      	lsls	r2, r1
 80018c0:	43d2      	mvns	r2, r2
 80018c2:	401a      	ands	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	7df9      	ldrb	r1, [r7, #23]
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	431a      	orrs	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOX,uint8_t PinNumber )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
	uint8_t bitstatus ;
	if(((GPIOX->IDR)&(1<<PinNumber))!= (uint32_t)GPIO_PIN_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f202 	lsl.w	r2, r1, r2
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <MCAL_GPIO_ReadPin+0x24>
	{
		bitstatus = GPIO_PIN_SET ;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e001      	b.n	800190c <MCAL_GPIO_ReadPin+0x28>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOX,uint8_t PinNumber , uint8_t Value)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	4613      	mov	r3, r2
 8001926:	70bb      	strb	r3, [r7, #2]
	if(Value != GPIO_PIN_RESET)
 8001928:	78bb      	ldrb	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <MCAL_GPIO_WritePin+0x2a>
	{
		GPIOX->ODR |= (1<<PinNumber);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOX->ODR &= ~(1<<PinNumber);
	}

}
 8001940:	e009      	b.n	8001956 <MCAL_GPIO_WritePin+0x3e>
		GPIOX->ODR &= ~(1<<PinNumber);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	43d2      	mvns	r2, r2
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60da      	str	r2, [r3, #12]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <Timer2_init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <Timer2_init+0x40>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <Timer2_init+0x44>)
 8001972:	2207      	movs	r2, #7
 8001974:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <Timer2_init+0x48>)
 8001978:	f24c 3250 	movw	r2, #50000	; 0xc350
 800197c:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 800197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800198e:	bf00      	nop
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <Timer2_init+0x4c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0fb      	beq.n	8001990 <Timer2_init+0x30>
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	4002101c 	.word	0x4002101c
 80019a4:	40000028 	.word	0x40000028
 80019a8:	4000002c 	.word	0x4000002c
 80019ac:	40000010 	.word	0x40000010

080019b0 <dus>:

void dus(int us)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <dus+0x24>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 80019be:	bf00      	nop
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <dus+0x24>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3fa      	bcc.n	80019c0 <dus+0x10>
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40000024 	.word	0x40000024

080019d8 <dms>:

void dms(int ms)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	int i=0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e006      	b.n	80019f8 <dms+0x20>
	{
		dus(1000);
 80019ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ee:	f7ff ffdf 	bl	80019b0 <dus>
	for(i=0;i<ms;i++)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf4      	blt.n	80019ea <dms+0x12>
	}
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <__errno>:
 8001a08:	4b01      	ldr	r3, [pc, #4]	; (8001a10 <__errno+0x8>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000004c 	.word	0x2000004c

08001a14 <__libc_init_array>:
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	2500      	movs	r5, #0
 8001a18:	4e0c      	ldr	r6, [pc, #48]	; (8001a4c <__libc_init_array+0x38>)
 8001a1a:	4c0d      	ldr	r4, [pc, #52]	; (8001a50 <__libc_init_array+0x3c>)
 8001a1c:	1ba4      	subs	r4, r4, r6
 8001a1e:	10a4      	asrs	r4, r4, #2
 8001a20:	42a5      	cmp	r5, r4
 8001a22:	d109      	bne.n	8001a38 <__libc_init_array+0x24>
 8001a24:	f000 fc2c 	bl	8002280 <_init>
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4e0a      	ldr	r6, [pc, #40]	; (8001a54 <__libc_init_array+0x40>)
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	; (8001a58 <__libc_init_array+0x44>)
 8001a2e:	1ba4      	subs	r4, r4, r6
 8001a30:	10a4      	asrs	r4, r4, #2
 8001a32:	42a5      	cmp	r5, r4
 8001a34:	d105      	bne.n	8001a42 <__libc_init_array+0x2e>
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a3c:	4798      	blx	r3
 8001a3e:	3501      	adds	r5, #1
 8001a40:	e7ee      	b.n	8001a20 <__libc_init_array+0xc>
 8001a42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a46:	4798      	blx	r3
 8001a48:	3501      	adds	r5, #1
 8001a4a:	e7f2      	b.n	8001a32 <__libc_init_array+0x1e>
 8001a4c:	080024b4 	.word	0x080024b4
 8001a50:	080024b4 	.word	0x080024b4
 8001a54:	080024b4 	.word	0x080024b4
 8001a58:	080024b8 	.word	0x080024b8

08001a5c <siprintf>:
 8001a5c:	b40e      	push	{r1, r2, r3}
 8001a5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a62:	b500      	push	{lr}
 8001a64:	b09c      	sub	sp, #112	; 0x70
 8001a66:	ab1d      	add	r3, sp, #116	; 0x74
 8001a68:	9002      	str	r0, [sp, #8]
 8001a6a:	9006      	str	r0, [sp, #24]
 8001a6c:	9107      	str	r1, [sp, #28]
 8001a6e:	9104      	str	r1, [sp, #16]
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <siprintf+0x38>)
 8001a72:	4909      	ldr	r1, [pc, #36]	; (8001a98 <siprintf+0x3c>)
 8001a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a78:	9105      	str	r1, [sp, #20]
 8001a7a:	6800      	ldr	r0, [r0, #0]
 8001a7c:	a902      	add	r1, sp, #8
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	f000 f866 	bl	8001b50 <_svfiprintf_r>
 8001a84:	2200      	movs	r2, #0
 8001a86:	9b02      	ldr	r3, [sp, #8]
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	b01c      	add	sp, #112	; 0x70
 8001a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a90:	b003      	add	sp, #12
 8001a92:	4770      	bx	lr
 8001a94:	2000004c 	.word	0x2000004c
 8001a98:	ffff0208 	.word	0xffff0208

08001a9c <__ssputs_r>:
 8001a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa0:	688e      	ldr	r6, [r1, #8]
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	429e      	cmp	r6, r3
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4690      	mov	r8, r2
 8001aaa:	4699      	mov	r9, r3
 8001aac:	d837      	bhi.n	8001b1e <__ssputs_r+0x82>
 8001aae:	898a      	ldrh	r2, [r1, #12]
 8001ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ab4:	d031      	beq.n	8001b1a <__ssputs_r+0x7e>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	6825      	ldr	r5, [r4, #0]
 8001aba:	6909      	ldr	r1, [r1, #16]
 8001abc:	1a6f      	subs	r7, r5, r1
 8001abe:	6965      	ldr	r5, [r4, #20]
 8001ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ac4:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ac8:	f109 0301 	add.w	r3, r9, #1
 8001acc:	443b      	add	r3, r7
 8001ace:	429d      	cmp	r5, r3
 8001ad0:	bf38      	it	cc
 8001ad2:	461d      	movcc	r5, r3
 8001ad4:	0553      	lsls	r3, r2, #21
 8001ad6:	d530      	bpl.n	8001b3a <__ssputs_r+0x9e>
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f000 fb37 	bl	800214c <_malloc_r>
 8001ade:	4606      	mov	r6, r0
 8001ae0:	b950      	cbnz	r0, 8001af8 <__ssputs_r+0x5c>
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f8ca 3000 	str.w	r3, [sl]
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af2:	81a3      	strh	r3, [r4, #12]
 8001af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af8:	463a      	mov	r2, r7
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	f000 fab6 	bl	800206c <memcpy>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	6126      	str	r6, [r4, #16]
 8001b0e:	443e      	add	r6, r7
 8001b10:	6026      	str	r6, [r4, #0]
 8001b12:	464e      	mov	r6, r9
 8001b14:	6165      	str	r5, [r4, #20]
 8001b16:	1bed      	subs	r5, r5, r7
 8001b18:	60a5      	str	r5, [r4, #8]
 8001b1a:	454e      	cmp	r6, r9
 8001b1c:	d900      	bls.n	8001b20 <__ssputs_r+0x84>
 8001b1e:	464e      	mov	r6, r9
 8001b20:	4632      	mov	r2, r6
 8001b22:	4641      	mov	r1, r8
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	f000 faac 	bl	8002082 <memmove>
 8001b2a:	68a3      	ldr	r3, [r4, #8]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	1b9b      	subs	r3, r3, r6
 8001b30:	60a3      	str	r3, [r4, #8]
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	441e      	add	r6, r3
 8001b36:	6026      	str	r6, [r4, #0]
 8001b38:	e7dc      	b.n	8001af4 <__ssputs_r+0x58>
 8001b3a:	462a      	mov	r2, r5
 8001b3c:	f000 fb60 	bl	8002200 <_realloc_r>
 8001b40:	4606      	mov	r6, r0
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d1e2      	bne.n	8001b0c <__ssputs_r+0x70>
 8001b46:	6921      	ldr	r1, [r4, #16]
 8001b48:	4650      	mov	r0, sl
 8001b4a:	f000 fab3 	bl	80020b4 <_free_r>
 8001b4e:	e7c8      	b.n	8001ae2 <__ssputs_r+0x46>

08001b50 <_svfiprintf_r>:
 8001b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b54:	461d      	mov	r5, r3
 8001b56:	898b      	ldrh	r3, [r1, #12]
 8001b58:	b09d      	sub	sp, #116	; 0x74
 8001b5a:	061f      	lsls	r7, r3, #24
 8001b5c:	4680      	mov	r8, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4616      	mov	r6, r2
 8001b62:	d50f      	bpl.n	8001b84 <_svfiprintf_r+0x34>
 8001b64:	690b      	ldr	r3, [r1, #16]
 8001b66:	b96b      	cbnz	r3, 8001b84 <_svfiprintf_r+0x34>
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	f000 faef 	bl	800214c <_malloc_r>
 8001b6e:	6020      	str	r0, [r4, #0]
 8001b70:	6120      	str	r0, [r4, #16]
 8001b72:	b928      	cbnz	r0, 8001b80 <_svfiprintf_r+0x30>
 8001b74:	230c      	movs	r3, #12
 8001b76:	f8c8 3000 	str.w	r3, [r8]
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7e:	e0c8      	b.n	8001d12 <_svfiprintf_r+0x1c2>
 8001b80:	2340      	movs	r3, #64	; 0x40
 8001b82:	6163      	str	r3, [r4, #20]
 8001b84:	2300      	movs	r3, #0
 8001b86:	9309      	str	r3, [sp, #36]	; 0x24
 8001b88:	2320      	movs	r3, #32
 8001b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b8e:	2330      	movs	r3, #48	; 0x30
 8001b90:	f04f 0b01 	mov.w	fp, #1
 8001b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b98:	9503      	str	r5, [sp, #12]
 8001b9a:	4637      	mov	r7, r6
 8001b9c:	463d      	mov	r5, r7
 8001b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ba2:	b10b      	cbz	r3, 8001ba8 <_svfiprintf_r+0x58>
 8001ba4:	2b25      	cmp	r3, #37	; 0x25
 8001ba6:	d13e      	bne.n	8001c26 <_svfiprintf_r+0xd6>
 8001ba8:	ebb7 0a06 	subs.w	sl, r7, r6
 8001bac:	d00b      	beq.n	8001bc6 <_svfiprintf_r+0x76>
 8001bae:	4653      	mov	r3, sl
 8001bb0:	4632      	mov	r2, r6
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4640      	mov	r0, r8
 8001bb6:	f7ff ff71 	bl	8001a9c <__ssputs_r>
 8001bba:	3001      	adds	r0, #1
 8001bbc:	f000 80a4 	beq.w	8001d08 <_svfiprintf_r+0x1b8>
 8001bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bc2:	4453      	add	r3, sl
 8001bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8001bc6:	783b      	ldrb	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 809d 	beq.w	8001d08 <_svfiprintf_r+0x1b8>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bd8:	9304      	str	r3, [sp, #16]
 8001bda:	9307      	str	r3, [sp, #28]
 8001bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001be0:	931a      	str	r3, [sp, #104]	; 0x68
 8001be2:	462f      	mov	r7, r5
 8001be4:	2205      	movs	r2, #5
 8001be6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001bea:	4850      	ldr	r0, [pc, #320]	; (8001d2c <_svfiprintf_r+0x1dc>)
 8001bec:	f000 fa30 	bl	8002050 <memchr>
 8001bf0:	9b04      	ldr	r3, [sp, #16]
 8001bf2:	b9d0      	cbnz	r0, 8001c2a <_svfiprintf_r+0xda>
 8001bf4:	06d9      	lsls	r1, r3, #27
 8001bf6:	bf44      	itt	mi
 8001bf8:	2220      	movmi	r2, #32
 8001bfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001bfe:	071a      	lsls	r2, r3, #28
 8001c00:	bf44      	itt	mi
 8001c02:	222b      	movmi	r2, #43	; 0x2b
 8001c04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c08:	782a      	ldrb	r2, [r5, #0]
 8001c0a:	2a2a      	cmp	r2, #42	; 0x2a
 8001c0c:	d015      	beq.n	8001c3a <_svfiprintf_r+0xea>
 8001c0e:	462f      	mov	r7, r5
 8001c10:	2000      	movs	r0, #0
 8001c12:	250a      	movs	r5, #10
 8001c14:	9a07      	ldr	r2, [sp, #28]
 8001c16:	4639      	mov	r1, r7
 8001c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c1c:	3b30      	subs	r3, #48	; 0x30
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d94d      	bls.n	8001cbe <_svfiprintf_r+0x16e>
 8001c22:	b1b8      	cbz	r0, 8001c54 <_svfiprintf_r+0x104>
 8001c24:	e00f      	b.n	8001c46 <_svfiprintf_r+0xf6>
 8001c26:	462f      	mov	r7, r5
 8001c28:	e7b8      	b.n	8001b9c <_svfiprintf_r+0x4c>
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <_svfiprintf_r+0x1dc>)
 8001c2c:	463d      	mov	r5, r7
 8001c2e:	1a80      	subs	r0, r0, r2
 8001c30:	fa0b f000 	lsl.w	r0, fp, r0
 8001c34:	4318      	orrs	r0, r3
 8001c36:	9004      	str	r0, [sp, #16]
 8001c38:	e7d3      	b.n	8001be2 <_svfiprintf_r+0x92>
 8001c3a:	9a03      	ldr	r2, [sp, #12]
 8001c3c:	1d11      	adds	r1, r2, #4
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	9103      	str	r1, [sp, #12]
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	db01      	blt.n	8001c4a <_svfiprintf_r+0xfa>
 8001c46:	9207      	str	r2, [sp, #28]
 8001c48:	e004      	b.n	8001c54 <_svfiprintf_r+0x104>
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	9207      	str	r2, [sp, #28]
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	783b      	ldrb	r3, [r7, #0]
 8001c56:	2b2e      	cmp	r3, #46	; 0x2e
 8001c58:	d10c      	bne.n	8001c74 <_svfiprintf_r+0x124>
 8001c5a:	787b      	ldrb	r3, [r7, #1]
 8001c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c5e:	d133      	bne.n	8001cc8 <_svfiprintf_r+0x178>
 8001c60:	9b03      	ldr	r3, [sp, #12]
 8001c62:	3702      	adds	r7, #2
 8001c64:	1d1a      	adds	r2, r3, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	9203      	str	r2, [sp, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c72:	9305      	str	r3, [sp, #20]
 8001c74:	4d2e      	ldr	r5, [pc, #184]	; (8001d30 <_svfiprintf_r+0x1e0>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	7839      	ldrb	r1, [r7, #0]
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 f9e8 	bl	8002050 <memchr>
 8001c80:	b138      	cbz	r0, 8001c92 <_svfiprintf_r+0x142>
 8001c82:	2340      	movs	r3, #64	; 0x40
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	fa03 f000 	lsl.w	r0, r3, r0
 8001c8a:	9b04      	ldr	r3, [sp, #16]
 8001c8c:	3701      	adds	r7, #1
 8001c8e:	4303      	orrs	r3, r0
 8001c90:	9304      	str	r3, [sp, #16]
 8001c92:	7839      	ldrb	r1, [r7, #0]
 8001c94:	2206      	movs	r2, #6
 8001c96:	4827      	ldr	r0, [pc, #156]	; (8001d34 <_svfiprintf_r+0x1e4>)
 8001c98:	1c7e      	adds	r6, r7, #1
 8001c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c9e:	f000 f9d7 	bl	8002050 <memchr>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d038      	beq.n	8001d18 <_svfiprintf_r+0x1c8>
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <_svfiprintf_r+0x1e8>)
 8001ca8:	bb13      	cbnz	r3, 8001cf0 <_svfiprintf_r+0x1a0>
 8001caa:	9b03      	ldr	r3, [sp, #12]
 8001cac:	3307      	adds	r3, #7
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cb8:	444b      	add	r3, r9
 8001cba:	9309      	str	r3, [sp, #36]	; 0x24
 8001cbc:	e76d      	b.n	8001b9a <_svfiprintf_r+0x4a>
 8001cbe:	fb05 3202 	mla	r2, r5, r2, r3
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	460f      	mov	r7, r1
 8001cc6:	e7a6      	b.n	8001c16 <_svfiprintf_r+0xc6>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	250a      	movs	r5, #10
 8001ccc:	4619      	mov	r1, r3
 8001cce:	3701      	adds	r7, #1
 8001cd0:	9305      	str	r3, [sp, #20]
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cd8:	3a30      	subs	r2, #48	; 0x30
 8001cda:	2a09      	cmp	r2, #9
 8001cdc:	d903      	bls.n	8001ce6 <_svfiprintf_r+0x196>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0c8      	beq.n	8001c74 <_svfiprintf_r+0x124>
 8001ce2:	9105      	str	r1, [sp, #20]
 8001ce4:	e7c6      	b.n	8001c74 <_svfiprintf_r+0x124>
 8001ce6:	fb05 2101 	mla	r1, r5, r1, r2
 8001cea:	2301      	movs	r3, #1
 8001cec:	4607      	mov	r7, r0
 8001cee:	e7f0      	b.n	8001cd2 <_svfiprintf_r+0x182>
 8001cf0:	ab03      	add	r3, sp, #12
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_svfiprintf_r+0x1ec>)
 8001cf8:	a904      	add	r1, sp, #16
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	f3af 8000 	nop.w
 8001d00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d04:	4681      	mov	r9, r0
 8001d06:	d1d6      	bne.n	8001cb6 <_svfiprintf_r+0x166>
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	065b      	lsls	r3, r3, #25
 8001d0c:	f53f af35 	bmi.w	8001b7a <_svfiprintf_r+0x2a>
 8001d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d12:	b01d      	add	sp, #116	; 0x74
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	ab03      	add	r3, sp, #12
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_svfiprintf_r+0x1ec>)
 8001d20:	a904      	add	r1, sp, #16
 8001d22:	4640      	mov	r0, r8
 8001d24:	f000 f882 	bl	8001e2c <_printf_i>
 8001d28:	e7ea      	b.n	8001d00 <_svfiprintf_r+0x1b0>
 8001d2a:	bf00      	nop
 8001d2c:	08002480 	.word	0x08002480
 8001d30:	08002486 	.word	0x08002486
 8001d34:	0800248a 	.word	0x0800248a
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	08001a9d 	.word	0x08001a9d

08001d40 <_printf_common>:
 8001d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d44:	4691      	mov	r9, r2
 8001d46:	461f      	mov	r7, r3
 8001d48:	688a      	ldr	r2, [r1, #8]
 8001d4a:	690b      	ldr	r3, [r1, #16]
 8001d4c:	4606      	mov	r6, r0
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	bfb8      	it	lt
 8001d52:	4613      	movlt	r3, r2
 8001d54:	f8c9 3000 	str.w	r3, [r9]
 8001d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d62:	b112      	cbz	r2, 8001d6a <_printf_common+0x2a>
 8001d64:	3301      	adds	r3, #1
 8001d66:	f8c9 3000 	str.w	r3, [r9]
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	0699      	lsls	r1, r3, #26
 8001d6e:	bf42      	ittt	mi
 8001d70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d74:	3302      	addmi	r3, #2
 8001d76:	f8c9 3000 	strmi.w	r3, [r9]
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	f015 0506 	ands.w	r5, r5, #6
 8001d80:	d107      	bne.n	8001d92 <_printf_common+0x52>
 8001d82:	f104 0a19 	add.w	sl, r4, #25
 8001d86:	68e3      	ldr	r3, [r4, #12]
 8001d88:	f8d9 2000 	ldr.w	r2, [r9]
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	42ab      	cmp	r3, r5
 8001d90:	dc29      	bgt.n	8001de6 <_printf_common+0xa6>
 8001d92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	3300      	adds	r3, #0
 8001d9a:	bf18      	it	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	0692      	lsls	r2, r2, #26
 8001da0:	d42e      	bmi.n	8001e00 <_printf_common+0xc0>
 8001da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001da6:	4639      	mov	r1, r7
 8001da8:	4630      	mov	r0, r6
 8001daa:	47c0      	blx	r8
 8001dac:	3001      	adds	r0, #1
 8001dae:	d021      	beq.n	8001df4 <_printf_common+0xb4>
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	68e5      	ldr	r5, [r4, #12]
 8001db4:	f003 0306 	and.w	r3, r3, #6
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	bf18      	it	ne
 8001dbc:	2500      	movne	r5, #0
 8001dbe:	f8d9 2000 	ldr.w	r2, [r9]
 8001dc2:	f04f 0900 	mov.w	r9, #0
 8001dc6:	bf08      	it	eq
 8001dc8:	1aad      	subeq	r5, r5, r2
 8001dca:	68a3      	ldr	r3, [r4, #8]
 8001dcc:	6922      	ldr	r2, [r4, #16]
 8001dce:	bf08      	it	eq
 8001dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bfc4      	itt	gt
 8001dd8:	1a9b      	subgt	r3, r3, r2
 8001dda:	18ed      	addgt	r5, r5, r3
 8001ddc:	341a      	adds	r4, #26
 8001dde:	454d      	cmp	r5, r9
 8001de0:	d11a      	bne.n	8001e18 <_printf_common+0xd8>
 8001de2:	2000      	movs	r0, #0
 8001de4:	e008      	b.n	8001df8 <_printf_common+0xb8>
 8001de6:	2301      	movs	r3, #1
 8001de8:	4652      	mov	r2, sl
 8001dea:	4639      	mov	r1, r7
 8001dec:	4630      	mov	r0, r6
 8001dee:	47c0      	blx	r8
 8001df0:	3001      	adds	r0, #1
 8001df2:	d103      	bne.n	8001dfc <_printf_common+0xbc>
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dfc:	3501      	adds	r5, #1
 8001dfe:	e7c2      	b.n	8001d86 <_printf_common+0x46>
 8001e00:	2030      	movs	r0, #48	; 0x30
 8001e02:	18e1      	adds	r1, r4, r3
 8001e04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e0e:	4422      	add	r2, r4
 8001e10:	3302      	adds	r3, #2
 8001e12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e16:	e7c4      	b.n	8001da2 <_printf_common+0x62>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	4639      	mov	r1, r7
 8001e1e:	4630      	mov	r0, r6
 8001e20:	47c0      	blx	r8
 8001e22:	3001      	adds	r0, #1
 8001e24:	d0e6      	beq.n	8001df4 <_printf_common+0xb4>
 8001e26:	f109 0901 	add.w	r9, r9, #1
 8001e2a:	e7d8      	b.n	8001dde <_printf_common+0x9e>

08001e2c <_printf_i>:
 8001e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001e34:	460c      	mov	r4, r1
 8001e36:	7e09      	ldrb	r1, [r1, #24]
 8001e38:	b085      	sub	sp, #20
 8001e3a:	296e      	cmp	r1, #110	; 0x6e
 8001e3c:	4617      	mov	r7, r2
 8001e3e:	4606      	mov	r6, r0
 8001e40:	4698      	mov	r8, r3
 8001e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e44:	f000 80b3 	beq.w	8001fae <_printf_i+0x182>
 8001e48:	d822      	bhi.n	8001e90 <_printf_i+0x64>
 8001e4a:	2963      	cmp	r1, #99	; 0x63
 8001e4c:	d036      	beq.n	8001ebc <_printf_i+0x90>
 8001e4e:	d80a      	bhi.n	8001e66 <_printf_i+0x3a>
 8001e50:	2900      	cmp	r1, #0
 8001e52:	f000 80b9 	beq.w	8001fc8 <_printf_i+0x19c>
 8001e56:	2958      	cmp	r1, #88	; 0x58
 8001e58:	f000 8083 	beq.w	8001f62 <_printf_i+0x136>
 8001e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e64:	e032      	b.n	8001ecc <_printf_i+0xa0>
 8001e66:	2964      	cmp	r1, #100	; 0x64
 8001e68:	d001      	beq.n	8001e6e <_printf_i+0x42>
 8001e6a:	2969      	cmp	r1, #105	; 0x69
 8001e6c:	d1f6      	bne.n	8001e5c <_printf_i+0x30>
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	0605      	lsls	r5, r0, #24
 8001e74:	f103 0104 	add.w	r1, r3, #4
 8001e78:	d52a      	bpl.n	8001ed0 <_printf_i+0xa4>
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6011      	str	r1, [r2, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da03      	bge.n	8001e8a <_printf_i+0x5e>
 8001e82:	222d      	movs	r2, #45	; 0x2d
 8001e84:	425b      	negs	r3, r3
 8001e86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e8a:	486f      	ldr	r0, [pc, #444]	; (8002048 <_printf_i+0x21c>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	e039      	b.n	8001f04 <_printf_i+0xd8>
 8001e90:	2973      	cmp	r1, #115	; 0x73
 8001e92:	f000 809d 	beq.w	8001fd0 <_printf_i+0x1a4>
 8001e96:	d808      	bhi.n	8001eaa <_printf_i+0x7e>
 8001e98:	296f      	cmp	r1, #111	; 0x6f
 8001e9a:	d020      	beq.n	8001ede <_printf_i+0xb2>
 8001e9c:	2970      	cmp	r1, #112	; 0x70
 8001e9e:	d1dd      	bne.n	8001e5c <_printf_i+0x30>
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	e003      	b.n	8001eb2 <_printf_i+0x86>
 8001eaa:	2975      	cmp	r1, #117	; 0x75
 8001eac:	d017      	beq.n	8001ede <_printf_i+0xb2>
 8001eae:	2978      	cmp	r1, #120	; 0x78
 8001eb0:	d1d4      	bne.n	8001e5c <_printf_i+0x30>
 8001eb2:	2378      	movs	r3, #120	; 0x78
 8001eb4:	4865      	ldr	r0, [pc, #404]	; (800204c <_printf_i+0x220>)
 8001eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001eba:	e055      	b.n	8001f68 <_printf_i+0x13c>
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ec2:	1d19      	adds	r1, r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6011      	str	r1, [r2, #0]
 8001ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e08c      	b.n	8001fea <_printf_i+0x1be>
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ed6:	6011      	str	r1, [r2, #0]
 8001ed8:	bf18      	it	ne
 8001eda:	b21b      	sxthne	r3, r3
 8001edc:	e7cf      	b.n	8001e7e <_printf_i+0x52>
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	6825      	ldr	r5, [r4, #0]
 8001ee2:	1d18      	adds	r0, r3, #4
 8001ee4:	6010      	str	r0, [r2, #0]
 8001ee6:	0628      	lsls	r0, r5, #24
 8001ee8:	d501      	bpl.n	8001eee <_printf_i+0xc2>
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	e002      	b.n	8001ef4 <_printf_i+0xc8>
 8001eee:	0668      	lsls	r0, r5, #25
 8001ef0:	d5fb      	bpl.n	8001eea <_printf_i+0xbe>
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	296f      	cmp	r1, #111	; 0x6f
 8001ef6:	bf14      	ite	ne
 8001ef8:	220a      	movne	r2, #10
 8001efa:	2208      	moveq	r2, #8
 8001efc:	4852      	ldr	r0, [pc, #328]	; (8002048 <_printf_i+0x21c>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f04:	6865      	ldr	r5, [r4, #4]
 8001f06:	2d00      	cmp	r5, #0
 8001f08:	60a5      	str	r5, [r4, #8]
 8001f0a:	f2c0 8095 	blt.w	8002038 <_printf_i+0x20c>
 8001f0e:	6821      	ldr	r1, [r4, #0]
 8001f10:	f021 0104 	bic.w	r1, r1, #4
 8001f14:	6021      	str	r1, [r4, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d13d      	bne.n	8001f96 <_printf_i+0x16a>
 8001f1a:	2d00      	cmp	r5, #0
 8001f1c:	f040 808e 	bne.w	800203c <_printf_i+0x210>
 8001f20:	4665      	mov	r5, ip
 8001f22:	2a08      	cmp	r2, #8
 8001f24:	d10b      	bne.n	8001f3e <_printf_i+0x112>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	07db      	lsls	r3, r3, #31
 8001f2a:	d508      	bpl.n	8001f3e <_printf_i+0x112>
 8001f2c:	6923      	ldr	r3, [r4, #16]
 8001f2e:	6862      	ldr	r2, [r4, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	bfde      	ittt	le
 8001f34:	2330      	movle	r3, #48	; 0x30
 8001f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f3e:	ebac 0305 	sub.w	r3, ip, r5
 8001f42:	6123      	str	r3, [r4, #16]
 8001f44:	f8cd 8000 	str.w	r8, [sp]
 8001f48:	463b      	mov	r3, r7
 8001f4a:	aa03      	add	r2, sp, #12
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	4630      	mov	r0, r6
 8001f50:	f7ff fef6 	bl	8001d40 <_printf_common>
 8001f54:	3001      	adds	r0, #1
 8001f56:	d14d      	bne.n	8001ff4 <_printf_i+0x1c8>
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	b005      	add	sp, #20
 8001f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f62:	4839      	ldr	r0, [pc, #228]	; (8002048 <_printf_i+0x21c>)
 8001f64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	6821      	ldr	r1, [r4, #0]
 8001f6c:	1d1d      	adds	r5, r3, #4
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6015      	str	r5, [r2, #0]
 8001f72:	060a      	lsls	r2, r1, #24
 8001f74:	d50b      	bpl.n	8001f8e <_printf_i+0x162>
 8001f76:	07ca      	lsls	r2, r1, #31
 8001f78:	bf44      	itt	mi
 8001f7a:	f041 0120 	orrmi.w	r1, r1, #32
 8001f7e:	6021      	strmi	r1, [r4, #0]
 8001f80:	b91b      	cbnz	r3, 8001f8a <_printf_i+0x15e>
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	f022 0220 	bic.w	r2, r2, #32
 8001f88:	6022      	str	r2, [r4, #0]
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	e7b7      	b.n	8001efe <_printf_i+0xd2>
 8001f8e:	064d      	lsls	r5, r1, #25
 8001f90:	bf48      	it	mi
 8001f92:	b29b      	uxthmi	r3, r3
 8001f94:	e7ef      	b.n	8001f76 <_printf_i+0x14a>
 8001f96:	4665      	mov	r5, ip
 8001f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f9c:	fb02 3311 	mls	r3, r2, r1, r3
 8001fa0:	5cc3      	ldrb	r3, [r0, r3]
 8001fa2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	2900      	cmp	r1, #0
 8001faa:	d1f5      	bne.n	8001f98 <_printf_i+0x16c>
 8001fac:	e7b9      	b.n	8001f22 <_printf_i+0xf6>
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	6825      	ldr	r5, [r4, #0]
 8001fb2:	1d18      	adds	r0, r3, #4
 8001fb4:	6961      	ldr	r1, [r4, #20]
 8001fb6:	6010      	str	r0, [r2, #0]
 8001fb8:	0628      	lsls	r0, r5, #24
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	d501      	bpl.n	8001fc2 <_printf_i+0x196>
 8001fbe:	6019      	str	r1, [r3, #0]
 8001fc0:	e002      	b.n	8001fc8 <_printf_i+0x19c>
 8001fc2:	066a      	lsls	r2, r5, #25
 8001fc4:	d5fb      	bpl.n	8001fbe <_printf_i+0x192>
 8001fc6:	8019      	strh	r1, [r3, #0]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	4665      	mov	r5, ip
 8001fcc:	6123      	str	r3, [r4, #16]
 8001fce:	e7b9      	b.n	8001f44 <_printf_i+0x118>
 8001fd0:	6813      	ldr	r3, [r2, #0]
 8001fd2:	1d19      	adds	r1, r3, #4
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	681d      	ldr	r5, [r3, #0]
 8001fd8:	6862      	ldr	r2, [r4, #4]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f000 f837 	bl	8002050 <memchr>
 8001fe2:	b108      	cbz	r0, 8001fe8 <_printf_i+0x1bc>
 8001fe4:	1b40      	subs	r0, r0, r5
 8001fe6:	6060      	str	r0, [r4, #4]
 8001fe8:	6863      	ldr	r3, [r4, #4]
 8001fea:	6123      	str	r3, [r4, #16]
 8001fec:	2300      	movs	r3, #0
 8001fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ff2:	e7a7      	b.n	8001f44 <_printf_i+0x118>
 8001ff4:	6923      	ldr	r3, [r4, #16]
 8001ff6:	462a      	mov	r2, r5
 8001ff8:	4639      	mov	r1, r7
 8001ffa:	4630      	mov	r0, r6
 8001ffc:	47c0      	blx	r8
 8001ffe:	3001      	adds	r0, #1
 8002000:	d0aa      	beq.n	8001f58 <_printf_i+0x12c>
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	079b      	lsls	r3, r3, #30
 8002006:	d413      	bmi.n	8002030 <_printf_i+0x204>
 8002008:	68e0      	ldr	r0, [r4, #12]
 800200a:	9b03      	ldr	r3, [sp, #12]
 800200c:	4298      	cmp	r0, r3
 800200e:	bfb8      	it	lt
 8002010:	4618      	movlt	r0, r3
 8002012:	e7a3      	b.n	8001f5c <_printf_i+0x130>
 8002014:	2301      	movs	r3, #1
 8002016:	464a      	mov	r2, r9
 8002018:	4639      	mov	r1, r7
 800201a:	4630      	mov	r0, r6
 800201c:	47c0      	blx	r8
 800201e:	3001      	adds	r0, #1
 8002020:	d09a      	beq.n	8001f58 <_printf_i+0x12c>
 8002022:	3501      	adds	r5, #1
 8002024:	68e3      	ldr	r3, [r4, #12]
 8002026:	9a03      	ldr	r2, [sp, #12]
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	42ab      	cmp	r3, r5
 800202c:	dcf2      	bgt.n	8002014 <_printf_i+0x1e8>
 800202e:	e7eb      	b.n	8002008 <_printf_i+0x1dc>
 8002030:	2500      	movs	r5, #0
 8002032:	f104 0919 	add.w	r9, r4, #25
 8002036:	e7f5      	b.n	8002024 <_printf_i+0x1f8>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ac      	bne.n	8001f96 <_printf_i+0x16a>
 800203c:	7803      	ldrb	r3, [r0, #0]
 800203e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002042:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002046:	e76c      	b.n	8001f22 <_printf_i+0xf6>
 8002048:	08002491 	.word	0x08002491
 800204c:	080024a2 	.word	0x080024a2

08002050 <memchr>:
 8002050:	b510      	push	{r4, lr}
 8002052:	b2c9      	uxtb	r1, r1
 8002054:	4402      	add	r2, r0
 8002056:	4290      	cmp	r0, r2
 8002058:	4603      	mov	r3, r0
 800205a:	d101      	bne.n	8002060 <memchr+0x10>
 800205c:	2300      	movs	r3, #0
 800205e:	e003      	b.n	8002068 <memchr+0x18>
 8002060:	781c      	ldrb	r4, [r3, #0]
 8002062:	3001      	adds	r0, #1
 8002064:	428c      	cmp	r4, r1
 8002066:	d1f6      	bne.n	8002056 <memchr+0x6>
 8002068:	4618      	mov	r0, r3
 800206a:	bd10      	pop	{r4, pc}

0800206c <memcpy>:
 800206c:	b510      	push	{r4, lr}
 800206e:	1e43      	subs	r3, r0, #1
 8002070:	440a      	add	r2, r1
 8002072:	4291      	cmp	r1, r2
 8002074:	d100      	bne.n	8002078 <memcpy+0xc>
 8002076:	bd10      	pop	{r4, pc}
 8002078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800207c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002080:	e7f7      	b.n	8002072 <memcpy+0x6>

08002082 <memmove>:
 8002082:	4288      	cmp	r0, r1
 8002084:	b510      	push	{r4, lr}
 8002086:	eb01 0302 	add.w	r3, r1, r2
 800208a:	d807      	bhi.n	800209c <memmove+0x1a>
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4299      	cmp	r1, r3
 8002090:	d00a      	beq.n	80020a8 <memmove+0x26>
 8002092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002096:	f802 4f01 	strb.w	r4, [r2, #1]!
 800209a:	e7f8      	b.n	800208e <memmove+0xc>
 800209c:	4283      	cmp	r3, r0
 800209e:	d9f5      	bls.n	800208c <memmove+0xa>
 80020a0:	1881      	adds	r1, r0, r2
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	42d3      	cmn	r3, r2
 80020a6:	d100      	bne.n	80020aa <memmove+0x28>
 80020a8:	bd10      	pop	{r4, pc}
 80020aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80020b2:	e7f7      	b.n	80020a4 <memmove+0x22>

080020b4 <_free_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4605      	mov	r5, r0
 80020b8:	2900      	cmp	r1, #0
 80020ba:	d043      	beq.n	8002144 <_free_r+0x90>
 80020bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020c0:	1f0c      	subs	r4, r1, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	18e4      	addlt	r4, r4, r3
 80020c8:	f000 f8d0 	bl	800226c <__malloc_lock>
 80020cc:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <_free_r+0x94>)
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	4610      	mov	r0, r2
 80020d2:	b933      	cbnz	r3, 80020e2 <_free_r+0x2e>
 80020d4:	6063      	str	r3, [r4, #4]
 80020d6:	6014      	str	r4, [r2, #0]
 80020d8:	4628      	mov	r0, r5
 80020da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020de:	f000 b8c6 	b.w	800226e <__malloc_unlock>
 80020e2:	42a3      	cmp	r3, r4
 80020e4:	d90b      	bls.n	80020fe <_free_r+0x4a>
 80020e6:	6821      	ldr	r1, [r4, #0]
 80020e8:	1862      	adds	r2, r4, r1
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bf01      	itttt	eq
 80020ee:	681a      	ldreq	r2, [r3, #0]
 80020f0:	685b      	ldreq	r3, [r3, #4]
 80020f2:	1852      	addeq	r2, r2, r1
 80020f4:	6022      	streq	r2, [r4, #0]
 80020f6:	6063      	str	r3, [r4, #4]
 80020f8:	6004      	str	r4, [r0, #0]
 80020fa:	e7ed      	b.n	80020d8 <_free_r+0x24>
 80020fc:	4613      	mov	r3, r2
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	b10a      	cbz	r2, 8002106 <_free_r+0x52>
 8002102:	42a2      	cmp	r2, r4
 8002104:	d9fa      	bls.n	80020fc <_free_r+0x48>
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	1858      	adds	r0, r3, r1
 800210a:	42a0      	cmp	r0, r4
 800210c:	d10b      	bne.n	8002126 <_free_r+0x72>
 800210e:	6820      	ldr	r0, [r4, #0]
 8002110:	4401      	add	r1, r0
 8002112:	1858      	adds	r0, r3, r1
 8002114:	4282      	cmp	r2, r0
 8002116:	6019      	str	r1, [r3, #0]
 8002118:	d1de      	bne.n	80020d8 <_free_r+0x24>
 800211a:	6810      	ldr	r0, [r2, #0]
 800211c:	6852      	ldr	r2, [r2, #4]
 800211e:	4401      	add	r1, r0
 8002120:	6019      	str	r1, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	e7d8      	b.n	80020d8 <_free_r+0x24>
 8002126:	d902      	bls.n	800212e <_free_r+0x7a>
 8002128:	230c      	movs	r3, #12
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	e7d4      	b.n	80020d8 <_free_r+0x24>
 800212e:	6820      	ldr	r0, [r4, #0]
 8002130:	1821      	adds	r1, r4, r0
 8002132:	428a      	cmp	r2, r1
 8002134:	bf01      	itttt	eq
 8002136:	6811      	ldreq	r1, [r2, #0]
 8002138:	6852      	ldreq	r2, [r2, #4]
 800213a:	1809      	addeq	r1, r1, r0
 800213c:	6021      	streq	r1, [r4, #0]
 800213e:	6062      	str	r2, [r4, #4]
 8002140:	605c      	str	r4, [r3, #4]
 8002142:	e7c9      	b.n	80020d8 <_free_r+0x24>
 8002144:	bd38      	pop	{r3, r4, r5, pc}
 8002146:	bf00      	nop
 8002148:	200000d0 	.word	0x200000d0

0800214c <_malloc_r>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	1ccd      	adds	r5, r1, #3
 8002150:	f025 0503 	bic.w	r5, r5, #3
 8002154:	3508      	adds	r5, #8
 8002156:	2d0c      	cmp	r5, #12
 8002158:	bf38      	it	cc
 800215a:	250c      	movcc	r5, #12
 800215c:	2d00      	cmp	r5, #0
 800215e:	4606      	mov	r6, r0
 8002160:	db01      	blt.n	8002166 <_malloc_r+0x1a>
 8002162:	42a9      	cmp	r1, r5
 8002164:	d903      	bls.n	800216e <_malloc_r+0x22>
 8002166:	230c      	movs	r3, #12
 8002168:	6033      	str	r3, [r6, #0]
 800216a:	2000      	movs	r0, #0
 800216c:	bd70      	pop	{r4, r5, r6, pc}
 800216e:	f000 f87d 	bl	800226c <__malloc_lock>
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <_malloc_r+0xac>)
 8002174:	6814      	ldr	r4, [r2, #0]
 8002176:	4621      	mov	r1, r4
 8002178:	b991      	cbnz	r1, 80021a0 <_malloc_r+0x54>
 800217a:	4c20      	ldr	r4, [pc, #128]	; (80021fc <_malloc_r+0xb0>)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	b91b      	cbnz	r3, 8002188 <_malloc_r+0x3c>
 8002180:	4630      	mov	r0, r6
 8002182:	f000 f863 	bl	800224c <_sbrk_r>
 8002186:	6020      	str	r0, [r4, #0]
 8002188:	4629      	mov	r1, r5
 800218a:	4630      	mov	r0, r6
 800218c:	f000 f85e 	bl	800224c <_sbrk_r>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d124      	bne.n	80021de <_malloc_r+0x92>
 8002194:	230c      	movs	r3, #12
 8002196:	4630      	mov	r0, r6
 8002198:	6033      	str	r3, [r6, #0]
 800219a:	f000 f868 	bl	800226e <__malloc_unlock>
 800219e:	e7e4      	b.n	800216a <_malloc_r+0x1e>
 80021a0:	680b      	ldr	r3, [r1, #0]
 80021a2:	1b5b      	subs	r3, r3, r5
 80021a4:	d418      	bmi.n	80021d8 <_malloc_r+0x8c>
 80021a6:	2b0b      	cmp	r3, #11
 80021a8:	d90f      	bls.n	80021ca <_malloc_r+0x7e>
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	18cc      	adds	r4, r1, r3
 80021ae:	50cd      	str	r5, [r1, r3]
 80021b0:	4630      	mov	r0, r6
 80021b2:	f000 f85c 	bl	800226e <__malloc_unlock>
 80021b6:	f104 000b 	add.w	r0, r4, #11
 80021ba:	1d23      	adds	r3, r4, #4
 80021bc:	f020 0007 	bic.w	r0, r0, #7
 80021c0:	1ac3      	subs	r3, r0, r3
 80021c2:	d0d3      	beq.n	800216c <_malloc_r+0x20>
 80021c4:	425a      	negs	r2, r3
 80021c6:	50e2      	str	r2, [r4, r3]
 80021c8:	e7d0      	b.n	800216c <_malloc_r+0x20>
 80021ca:	684b      	ldr	r3, [r1, #4]
 80021cc:	428c      	cmp	r4, r1
 80021ce:	bf16      	itet	ne
 80021d0:	6063      	strne	r3, [r4, #4]
 80021d2:	6013      	streq	r3, [r2, #0]
 80021d4:	460c      	movne	r4, r1
 80021d6:	e7eb      	b.n	80021b0 <_malloc_r+0x64>
 80021d8:	460c      	mov	r4, r1
 80021da:	6849      	ldr	r1, [r1, #4]
 80021dc:	e7cc      	b.n	8002178 <_malloc_r+0x2c>
 80021de:	1cc4      	adds	r4, r0, #3
 80021e0:	f024 0403 	bic.w	r4, r4, #3
 80021e4:	42a0      	cmp	r0, r4
 80021e6:	d005      	beq.n	80021f4 <_malloc_r+0xa8>
 80021e8:	1a21      	subs	r1, r4, r0
 80021ea:	4630      	mov	r0, r6
 80021ec:	f000 f82e 	bl	800224c <_sbrk_r>
 80021f0:	3001      	adds	r0, #1
 80021f2:	d0cf      	beq.n	8002194 <_malloc_r+0x48>
 80021f4:	6025      	str	r5, [r4, #0]
 80021f6:	e7db      	b.n	80021b0 <_malloc_r+0x64>
 80021f8:	200000d0 	.word	0x200000d0
 80021fc:	200000d4 	.word	0x200000d4

08002200 <_realloc_r>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	4607      	mov	r7, r0
 8002204:	4614      	mov	r4, r2
 8002206:	460e      	mov	r6, r1
 8002208:	b921      	cbnz	r1, 8002214 <_realloc_r+0x14>
 800220a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800220e:	4611      	mov	r1, r2
 8002210:	f7ff bf9c 	b.w	800214c <_malloc_r>
 8002214:	b922      	cbnz	r2, 8002220 <_realloc_r+0x20>
 8002216:	f7ff ff4d 	bl	80020b4 <_free_r>
 800221a:	4625      	mov	r5, r4
 800221c:	4628      	mov	r0, r5
 800221e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002220:	f000 f826 	bl	8002270 <_malloc_usable_size_r>
 8002224:	42a0      	cmp	r0, r4
 8002226:	d20f      	bcs.n	8002248 <_realloc_r+0x48>
 8002228:	4621      	mov	r1, r4
 800222a:	4638      	mov	r0, r7
 800222c:	f7ff ff8e 	bl	800214c <_malloc_r>
 8002230:	4605      	mov	r5, r0
 8002232:	2800      	cmp	r0, #0
 8002234:	d0f2      	beq.n	800221c <_realloc_r+0x1c>
 8002236:	4631      	mov	r1, r6
 8002238:	4622      	mov	r2, r4
 800223a:	f7ff ff17 	bl	800206c <memcpy>
 800223e:	4631      	mov	r1, r6
 8002240:	4638      	mov	r0, r7
 8002242:	f7ff ff37 	bl	80020b4 <_free_r>
 8002246:	e7e9      	b.n	800221c <_realloc_r+0x1c>
 8002248:	4635      	mov	r5, r6
 800224a:	e7e7      	b.n	800221c <_realloc_r+0x1c>

0800224c <_sbrk_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	2300      	movs	r3, #0
 8002250:	4c05      	ldr	r4, [pc, #20]	; (8002268 <_sbrk_r+0x1c>)
 8002252:	4605      	mov	r5, r0
 8002254:	4608      	mov	r0, r1
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	f7fe fff2 	bl	8001240 <_sbrk>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_sbrk_r+0x1a>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	b103      	cbz	r3, 8002266 <_sbrk_r+0x1a>
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200001fc 	.word	0x200001fc

0800226c <__malloc_lock>:
 800226c:	4770      	bx	lr

0800226e <__malloc_unlock>:
 800226e:	4770      	bx	lr

08002270 <_malloc_usable_size_r>:
 8002270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002274:	1f18      	subs	r0, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	bfbc      	itt	lt
 800227a:	580b      	ldrlt	r3, [r1, r0]
 800227c:	18c0      	addlt	r0, r0, r3
 800227e:	4770      	bx	lr

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr
